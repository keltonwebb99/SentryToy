
PetProtect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003480  08003480  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003480  08003480  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003480  08003480  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003488  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003494  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003494  00005080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000991d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fb  00000000  00000000  0000e959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00010058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089f  00000000  00000000  00010b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002521f  00000000  00000000  00011427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba9a  00000000  00000000  00036646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f6f  00000000  00000000  000420e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b04f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  0012b094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0012e004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003428 	.word	0x08003428

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003428 	.word	0x08003428

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b598      	push	{r3, r4, r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  HAL_Init();
 80009a8:	f000 fb18 	bl	8000fdc <HAL_Init>
  SystemClock_Config();
 80009ac:	f000 f8e6 	bl	8000b7c <SystemClock_Config>
  MX_GPIO_Init();
 80009b0:	f000 f9b8 	bl	8000d24 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009b4:	f000 f934 	bl	8000c20 <MX_TIM2_Init>

  /* Start PWM */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4842      	ldr	r0, [pc, #264]	@ (8000ac4 <main+0x120>)
 80009bc:	f001 fd6c 	bl	8002498 <HAL_TIM_PWM_Start>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <main+0x26>
  {
    /* PWM Generation Error */
    Error_Handler();
 80009c6:	f000 fa21 	bl	8000e0c <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	2104      	movs	r1, #4
 80009cc:	483d      	ldr	r0, [pc, #244]	@ (8000ac4 <main+0x120>)
 80009ce:	f001 fd63 	bl	8002498 <HAL_TIM_PWM_Start>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <main+0x38>
  {
    /* PWM Generation Error */
    Error_Handler();
 80009d8:	f000 fa18 	bl	8000e0c <Error_Handler>
  }

  while (1)
  {
    /* Check button press to switch modes */
    buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); // Assume button connected to PC13
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4839      	ldr	r0, [pc, #228]	@ (8000ac8 <main+0x124>)
 80009e2:	f000 fe2b 	bl	800163c <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <main+0x128>)
 80009ec:	701a      	strb	r2, [r3, #0]
    if (buttonState == GPIO_PIN_SET)
 80009ee:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <main+0x128>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d105      	bne.n	8000a02 <main+0x5e>
    {
      SwitchMode();
 80009f6:	f000 f8a3 	bl	8000b40 <SwitchMode>
      HAL_Delay(500); // Debounce delay
 80009fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009fe:	f000 fb69 	bl	80010d4 <HAL_Delay>
    }

    /* Read PIR sensor state */
    pirState1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f000 fe17 	bl	800163c <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <main+0x12c>)
 8000a14:	701a      	strb	r2, [r3, #0]

    if (pirState1 == GPIO_PIN_SET)
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <main+0x12c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d147      	bne.n	8000aae <main+0x10a>
    {
      if (mode == 0)
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <main+0x130>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d121      	bne.n	8000a6a <main+0xc6>
      {
        /* Pet mode: Control the laser (LED) */
        ControlLaser(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 f85a 	bl	8000ae0 <ControlLaser>
        // Move the servo to engage the laser in the pet mode direction
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (htim2.Init.Period + 1) * 7.5 / 100); // Example position
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <main+0x120>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd0a 	bl	800044c <__aeabi_ui2d>
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <main+0x134>)
 8000a3e:	f7ff fd7f 	bl	8000540 <__aeabi_dmul>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <main+0x138>)
 8000a50:	f7ff fea0 	bl	8000794 <__aeabi_ddiv>
 8000a54:	4602      	mov	r2, r0
 8000a56:	460b      	mov	r3, r1
 8000a58:	491a      	ldr	r1, [pc, #104]	@ (8000ac4 <main+0x120>)
 8000a5a:	680c      	ldr	r4, [r1, #0]
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f7ff ff80 	bl	8000964 <__aeabi_d2uiz>
 8000a64:	4603      	mov	r3, r0
 8000a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a68:	e027      	b.n	8000aba <main+0x116>
      }
      else
      {
        /* Protect mode: Control the flashlight (LED) */
        ControlFlashlight(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 f850 	bl	8000b10 <ControlFlashlight>
        // Move the servo to engage the flashlight in the protect mode direction
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (htim2.Init.Period + 1) * 7.5 / 100); // Example position
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <main+0x120>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fce8 	bl	800044c <__aeabi_ui2d>
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <main+0x134>)
 8000a82:	f7ff fd5d 	bl	8000540 <__aeabi_dmul>
 8000a86:	4602      	mov	r2, r0
 8000a88:	460b      	mov	r3, r1
 8000a8a:	4610      	mov	r0, r2
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <main+0x138>)
 8000a94:	f7ff fe7e 	bl	8000794 <__aeabi_ddiv>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	4909      	ldr	r1, [pc, #36]	@ (8000ac4 <main+0x120>)
 8000a9e:	680c      	ldr	r4, [r1, #0]
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f7ff ff5e 	bl	8000964 <__aeabi_d2uiz>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000aac:	e005      	b.n	8000aba <main+0x116>
      }
    }
    else
    {
      ControlLaser(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f816 	bl	8000ae0 <ControlLaser>
      ControlFlashlight(0);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f82b 	bl	8000b10 <ControlFlashlight>
    }

    HAL_Delay(500); // Delay to debounce PIR sensor signals
 8000aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000abe:	f000 fb09 	bl	80010d4 <HAL_Delay>
    buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); // Assume button connected to PC13
 8000ac2:	e78b      	b.n	80009dc <main+0x38>
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	48000800 	.word	0x48000800
 8000acc:	20000075 	.word	0x20000075
 8000ad0:	20000074 	.word	0x20000074
 8000ad4:	20000078 	.word	0x20000078
 8000ad8:	401e0000 	.word	0x401e0000
 8000adc:	40590000 	.word	0x40590000

08000ae0 <ControlLaser>:
  }
}

/* Helper functions */
void ControlLaser(int state)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d106      	bne.n	8000afc <ControlLaser+0x1c>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 fdb9 	bl	800166c <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
  }
}
 8000afa:	e005      	b.n	8000b08 <ControlLaser+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	@ 0x40
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f000 fdb2 	bl	800166c <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ControlFlashlight>:

void ControlFlashlight(int state)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d106      	bne.n	8000b2c <ControlFlashlight+0x1c>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 fda1 	bl	800166c <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
  }
}
 8000b2a:	e005      	b.n	8000b38 <ControlFlashlight+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f000 fd9a 	bl	800166c <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SwitchMode>:

void SwitchMode(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  mode = !mode; // Toggle mode
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <SwitchMode+0x38>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <SwitchMode+0x38>)
 8000b56:	601a      	str	r2, [r3, #0]
  // Optionally, add visual feedback for mode switching
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b58:	2120      	movs	r1, #32
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5e:	f000 fd9d 	bl	800169c <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8000b62:	20c8      	movs	r0, #200	@ 0xc8
 8000b64:	f000 fab6 	bl	80010d4 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b68:	2120      	movs	r1, #32
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6e:	f000 fd95 	bl	800169c <HAL_GPIO_TogglePin>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000078 	.word	0x20000078

08000b7c <SystemClock_Config>:

/* System Clock Configuration */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b096      	sub	sp, #88	@ 0x58
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2244      	movs	r2, #68	@ 0x44
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fc20 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ba2:	f000 fda3 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bac:	f000 f92e 	bl	8000e0c <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bca:	230a      	movs	r3, #10
 8000bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fdda 	bl	8001798 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bea:	f000 f90f 	bl	8000e0c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	2104      	movs	r1, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 f9a2 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c12:	f000 f8fb 	bl	8000e0c <Error_Handler>
  }
}
 8000c16:	bf00      	nop
 8000c18:	3758      	adds	r7, #88	@ 0x58
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_TIM2_Init>:

/* TIM2 Initialization Function */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c5c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c6a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7c:	4828      	ldr	r0, [pc, #160]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c7e:	f001 fb53 	bl	8002328 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c88:	f000 f8c0 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4821      	ldr	r0, [pc, #132]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000c9a:	f001 fe17 	bl	80028cc <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ca4:	f000 f8b2 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca8:	481d      	ldr	r0, [pc, #116]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000caa:	f001 fb94 	bl	80023d6 <HAL_TIM_PWM_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cb4:	f000 f8aa 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000cd0:	f001 fce8 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000cda:	f000 f897 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000ce6:	f001 fcdd 	bl	80026a4 <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000cf0:	f000 f88c 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000d04:	f002 fadc 	bl	80032c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000d0e:	f000 f87d 	bl	8000e0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d12:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <MX_TIM2_Init+0x100>)
 8000d14:	f000 f8c2 	bl	8000e9c <HAL_TIM_MspPostInit>
}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	@ 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000028 	.word	0x20000028

08000d24 <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a31      	ldr	r2, [pc, #196]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b29      	ldr	r3, [pc, #164]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a25      	ldr	r2, [pc, #148]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a1f      	ldr	r2, [pc, #124]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_GPIO_Init+0xe0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2160      	movs	r1, #96	@ 0x60
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 fc63 	bl	800166c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000da6:	2360      	movs	r3, #96	@ 0x60
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc0:	f000 fa92 	bl	80012e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f000 fa84 	bl	80012e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_GPIO_Init+0xe4>)
 8000df6:	f000 fa77 	bl	80012e8 <HAL_GPIO_Init>
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000800 	.word	0x48000800

08000e0c <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e70:	d10b      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <HAL_TIM_Base_MspInit+0x38>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0x38>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_TIM_Base_MspInit+0x38>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebc:	d11c      	bne.n	8000ef8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_TIM_MspPostInit+0x64>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_TIM_MspPostInit+0x64>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_TIM_MspPostInit+0x64>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f000 f9f8 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f89b 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f002 fa13 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fba:	f7ff fcf3 	bl	80009a4 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fcc:	08003488 	.word	0x08003488
  ldr r2, =_sbss
 8000fd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd4:	20000080 	.word	0x20000080

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_Init+0x3c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <HAL_Init+0x3c>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f944 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f80f 	bl	800101c <HAL_InitTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e001      	b.n	800100e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100a:	f7ff ff05 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_InitTick+0x6c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d023      	beq.n	8001078 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_InitTick+0x70>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_InitTick+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f941 	bl	80012ce <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10f      	bne.n	8001072 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d809      	bhi.n	800106c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f919 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_InitTick+0x74>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e007      	b.n	800107c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e004      	b.n	800107c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e001      	b.n	800107c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	2000007c 	.word	0x2000007c

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000007c 	.word	0x2000007c

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e17f      	b.n	80015f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8171 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d118      	bne.n	80013c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80ac 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <HAL_GPIO_Init+0x330>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	4a5e      	ldr	r2, [pc, #376]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b2:	4a5a      	ldr	r2, [pc, #360]	@ (800161c <HAL_GPIO_Init+0x334>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x242>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001620 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x23e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x23a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001628 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x236>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	@ (800162c <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x232>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	@ (8001630 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	@ (8001634 <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x22a>
 800150e:	2306      	movs	r3, #6
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001512:	2307      	movs	r3, #7
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x244>
 800152a:	2300      	movs	r3, #0
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800153c:	4937      	ldr	r1, [pc, #220]	@ (800161c <HAL_GPIO_Init+0x334>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_GPIO_Init+0x350>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800156e:	4a32      	ldr	r2, [pc, #200]	@ (8001638 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <HAL_GPIO_Init+0x350>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001598:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f ae78 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48001800 	.word	0x48001800
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43d9      	mvns	r1, r3
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016fa:	d130      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001708:	d038      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	@ 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001744:	d102      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001758:	d110      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e00f      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d007      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001774:	4a05      	ldr	r2, [pc, #20]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3ca      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b4:	4b94      	ldr	r3, [pc, #592]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e4 	beq.w	8001994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	f040 808b 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 8087 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3a2      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x7c>
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001812:	e005      	b.n	8001820 <HAL_RCC_OscConfig+0x88>
 8001814:	4b7c      	ldr	r3, [pc, #496]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001820:	4293      	cmp	r3, r2
 8001822:	d223      	bcs.n	800186c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd1d 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e383      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a72      	ldr	r2, [pc, #456]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	496d      	ldr	r1, [pc, #436]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b6c      	ldr	r3, [pc, #432]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4968      	ldr	r1, [pc, #416]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e025      	b.n	80018b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4960      	ldr	r1, [pc, #384]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	495b      	ldr	r1, [pc, #364]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fcdd 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e343      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b8:	f000 fc4a 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b52      	ldr	r3, [pc, #328]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4950      	ldr	r1, [pc, #320]	@ (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a10 <HAL_RCC_OscConfig+0x278>)
 80018d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb9d 	bl	800101c <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d052      	beq.n	8001992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	e327      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff fbda 	bl	80010bc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff fbd6 	bl	80010bc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e310      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192a:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4931      	ldr	r1, [pc, #196]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001948:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	492c      	ldr	r1, [pc, #176]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e01a      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196a:	f7ff fba7 	bl	80010bc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001972:	f7ff fba3 	bl	80010bc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2dd      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x1da>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d074      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x21a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d064      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d160      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2ba      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x24a>
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x280>
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a02      	ldr	r2, [pc, #8]	@ (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08003440 	.word	0x08003440
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
 8001a18:	4ba0      	ldr	r3, [pc, #640]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b9d      	ldr	r3, [pc, #628]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9c      	ldr	r2, [pc, #624]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb40 	bl	80010bc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb3c 	bl	80010bc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	@ 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e276      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b92      	ldr	r3, [pc, #584]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb2c 	bl	80010bc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb28 	bl	80010bc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e262      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e23f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4973      	ldr	r1, [pc, #460]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fae7 	bl	80010bc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fae3 	bl	80010bc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e21d      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	495f      	ldr	r1, [pc, #380]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b5d      	ldr	r3, [pc, #372]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff fac3 	bl	80010bc <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fabf 	bl	80010bc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f9      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b72:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fa9e 	bl	80010bc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fa9a 	bl	80010bc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1d4      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bac:	4a3b      	ldr	r2, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa81 	bl	80010bc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fa7d 	bl	80010bc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1b7      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a26      	ldr	r2, [pc, #152]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fa44 	bl	80010bc <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff fa40 	bl	80010bc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e17a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6e:	e029      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x50c>
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a03      	ldr	r2, [pc, #12]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001caa:	4a9b      	ldr	r2, [pc, #620]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb4:	4b98      	ldr	r3, [pc, #608]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cba:	4a97      	ldr	r2, [pc, #604]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9f6 	bl	80010bc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9f2 	bl	80010bc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e12a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b8b      	ldr	r3, [pc, #556]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x53c>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f9df 	bl	80010bc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f9db 	bl	80010bc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e113      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b7f      	ldr	r3, [pc, #508]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	4a79      	ldr	r2, [pc, #484]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80fe 	beq.w	8001f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 80d0 	bne.w	8001eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d4c:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d130      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d127      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d8c:	2a07      	cmp	r2, #7
 8001d8e:	bf14      	ite	ne
 8001d90:	2201      	movne	r2, #1
 8001d92:	2200      	moveq	r2, #0
 8001d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d06e      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d069      	beq.n	8001e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc8:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ad      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7ff f964 	bl	80010bc <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f960 	bl	80010bc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e09a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b43      	ldr	r3, [pc, #268]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x784>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0552      	lsls	r2, r2, #21
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0652      	lsls	r2, r2, #25
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e50:	0912      	lsrs	r2, r2, #4
 8001e52:	0452      	lsls	r2, r2, #17
 8001e54:	430a      	orrs	r2, r1
 8001e56:	4930      	ldr	r1, [pc, #192]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f922 	bl	80010bc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f91e 	bl	80010bc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e058      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9a:	e050      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e04f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d148      	bne.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec4:	f7ff f8fa 	bl	80010bc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f8f6 	bl	80010bc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e030      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x734>
 8001eea:	e028      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8dd 	bl	80010bc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff f8d9 	bl	80010bc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d905      	bls.n	8001f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e013      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4905      	ldr	r1, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCC_OscConfig+0x7b4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e001      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	feeefffc 	.word	0xfeeefffc

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0e7      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4970      	ldr	r1, [pc, #448]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b6e      	ldr	r3, [pc, #440]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cf      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d908      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4960      	ldr	r1, [pc, #384]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0a6      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e086      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4943      	ldr	r1, [pc, #268]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7ff f840 	bl	80010bc <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff f83c 	bl	80010bc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e06e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	492b      	ldr	r1, [pc, #172]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002096:	4b29      	ldr	r3, [pc, #164]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d210      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4923      	ldr	r1, [pc, #140]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e036      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4918      	ldr	r1, [pc, #96]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4910      	ldr	r1, [pc, #64]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002104:	f000 f824 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	490b      	ldr	r1, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff77 	bl	800101c <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	72fb      	strb	r3, [r7, #11]

  return status;
 8002132:	7afb      	ldrb	r3, [r7, #11]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	08003440 	.word	0x08003440
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b3e      	ldr	r3, [pc, #248]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x34>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d11e      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021ac:	4a2b      	ldr	r2, [pc, #172]	@ (800225c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d134      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xac>
 80021f4:	e005      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	617b      	str	r3, [r7, #20]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	3301      	adds	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0e5b      	lsrs	r3, r3, #25
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	08003450 	.word	0x08003450
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200

08002268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002280:	f7ff fa26 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002284:	6178      	str	r0, [r7, #20]
 8002286:	e014      	b.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6593      	str	r3, [r2, #88]	@ 0x58
 8002294:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a0:	f7ff fa16 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80022a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b8:	d10b      	bne.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b80      	cmp	r3, #128	@ 0x80
 80022be:	d919      	bls.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80022c4:	d902      	bls.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c6:	2302      	movs	r3, #2
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e013      	b.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e010      	b.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	@ 0x80
 80022d6:	d902      	bls.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d8:	2303      	movs	r3, #3
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e00a      	b.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b80      	cmp	r3, #128	@ 0x80
 80022e2:	d102      	bne.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e4:	2302      	movs	r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e004      	b.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b70      	cmp	r3, #112	@ 0x70
 80022ee:	d101      	bne.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f0:	2301      	movs	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 0207 	bic.w	r2, r3, #7
 80022fc:	4909      	ldr	r1, [pc, #36]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002304:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e049      	b.n	80023ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fd86 	bl	8000e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f000 fb7a 	bl	8002a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e049      	b.n	800247c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f841 	bl	8002484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f000 fb23 	bl	8002a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_TIM_PWM_Start+0x24>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e03c      	b.n	8002536 <HAL_TIM_PWM_Start+0x9e>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d109      	bne.n	80024d6 <HAL_TIM_PWM_Start+0x3e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e02f      	b.n	8002536 <HAL_TIM_PWM_Start+0x9e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d109      	bne.n	80024f0 <HAL_TIM_PWM_Start+0x58>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e022      	b.n	8002536 <HAL_TIM_PWM_Start+0x9e>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d109      	bne.n	800250a <HAL_TIM_PWM_Start+0x72>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	e015      	b.n	8002536 <HAL_TIM_PWM_Start+0x9e>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b10      	cmp	r3, #16
 800250e:	d109      	bne.n	8002524 <HAL_TIM_PWM_Start+0x8c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e008      	b.n	8002536 <HAL_TIM_PWM_Start+0x9e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e09c      	b.n	8002678 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <HAL_TIM_PWM_Start+0xb6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800254c:	e023      	b.n	8002596 <HAL_TIM_PWM_Start+0xfe>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Start+0xc6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800255c:	e01b      	b.n	8002596 <HAL_TIM_PWM_Start+0xfe>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0xd6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800256c:	e013      	b.n	8002596 <HAL_TIM_PWM_Start+0xfe>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xe6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800257c:	e00b      	b.n	8002596 <HAL_TIM_PWM_Start+0xfe>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b10      	cmp	r3, #16
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xf6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800258c:	e003      	b.n	8002596 <HAL_TIM_PWM_Start+0xfe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fe68 	bl	8003274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a35      	ldr	r2, [pc, #212]	@ (8002680 <HAL_TIM_PWM_Start+0x1e8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x13e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a34      	ldr	r2, [pc, #208]	@ (8002684 <HAL_TIM_PWM_Start+0x1ec>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00e      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x13e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a32      	ldr	r2, [pc, #200]	@ (8002688 <HAL_TIM_PWM_Start+0x1f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x13e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a31      	ldr	r2, [pc, #196]	@ (800268c <HAL_TIM_PWM_Start+0x1f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x13e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <HAL_TIM_PWM_Start+0x1f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_TIM_PWM_Start+0x142>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_TIM_PWM_Start+0x144>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_TIM_PWM_Start+0x1e8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002602:	d018      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <HAL_TIM_PWM_Start+0x1fc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <HAL_TIM_PWM_Start+0x200>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <HAL_TIM_PWM_Start+0x204>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_TIM_PWM_Start+0x1ec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_TIM_PWM_Start+0x19e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <HAL_TIM_PWM_Start+0x1f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d115      	bne.n	8002662 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_TIM_PWM_Start+0x208>)
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d015      	beq.n	8002674 <HAL_TIM_PWM_Start+0x1dc>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264e:	d011      	beq.n	8002674 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	e008      	b.n	8002674 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e000      	b.n	8002676 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40013400 	.word	0x40013400
 8002688:	40014000 	.word	0x40014000
 800268c:	40014400 	.word	0x40014400
 8002690:	40014800 	.word	0x40014800
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	00010007 	.word	0x00010007

080026a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ff      	b.n	80028c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b14      	cmp	r3, #20
 80026ce:	f200 80f0 	bhi.w	80028b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80026d2:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	0800272d 	.word	0x0800272d
 80026dc:	080028b3 	.word	0x080028b3
 80026e0:	080028b3 	.word	0x080028b3
 80026e4:	080028b3 	.word	0x080028b3
 80026e8:	0800276d 	.word	0x0800276d
 80026ec:	080028b3 	.word	0x080028b3
 80026f0:	080028b3 	.word	0x080028b3
 80026f4:	080028b3 	.word	0x080028b3
 80026f8:	080027af 	.word	0x080027af
 80026fc:	080028b3 	.word	0x080028b3
 8002700:	080028b3 	.word	0x080028b3
 8002704:	080028b3 	.word	0x080028b3
 8002708:	080027ef 	.word	0x080027ef
 800270c:	080028b3 	.word	0x080028b3
 8002710:	080028b3 	.word	0x080028b3
 8002714:	080028b3 	.word	0x080028b3
 8002718:	08002831 	.word	0x08002831
 800271c:	080028b3 	.word	0x080028b3
 8002720:	080028b3 	.word	0x080028b3
 8002724:	080028b3 	.word	0x080028b3
 8002728:	08002871 	.word	0x08002871
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fa2e 	bl	8002b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0208 	orr.w	r2, r2, #8
 8002746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0204 	bic.w	r2, r2, #4
 8002756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6999      	ldr	r1, [r3, #24]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	619a      	str	r2, [r3, #24]
      break;
 800276a:	e0a5      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa9e 	bl	8002cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6999      	ldr	r1, [r3, #24]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	619a      	str	r2, [r3, #24]
      break;
 80027ac:	e084      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fb07 	bl	8002dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0208 	orr.w	r2, r2, #8
 80027c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0204 	bic.w	r2, r2, #4
 80027d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69d9      	ldr	r1, [r3, #28]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	61da      	str	r2, [r3, #28]
      break;
 80027ec:	e064      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fb6f 	bl	8002ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69d9      	ldr	r1, [r3, #28]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	021a      	lsls	r2, r3, #8
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	61da      	str	r2, [r3, #28]
      break;
 800282e:	e043      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fbb8 	bl	8002fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0208 	orr.w	r2, r2, #8
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800286e:	e023      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fbfc 	bl	8003074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	021a      	lsls	r2, r3, #8
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80028b0:	e002      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
      break;
 80028b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0b6      	b.n	8002a56 <HAL_TIM_ConfigClockSource+0x18a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002906:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800290a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002924:	d03e      	beq.n	80029a4 <HAL_TIM_ConfigClockSource+0xd8>
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800292a:	f200 8087 	bhi.w	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002932:	f000 8086 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x176>
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293a:	d87f      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 800293c:	2b70      	cmp	r3, #112	@ 0x70
 800293e:	d01a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xaa>
 8002940:	2b70      	cmp	r3, #112	@ 0x70
 8002942:	d87b      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 8002944:	2b60      	cmp	r3, #96	@ 0x60
 8002946:	d050      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x11e>
 8002948:	2b60      	cmp	r3, #96	@ 0x60
 800294a:	d877      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 800294c:	2b50      	cmp	r3, #80	@ 0x50
 800294e:	d03c      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0xfe>
 8002950:	2b50      	cmp	r3, #80	@ 0x50
 8002952:	d873      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	d058      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x13e>
 8002958:	2b40      	cmp	r3, #64	@ 0x40
 800295a:	d86f      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 800295c:	2b30      	cmp	r3, #48	@ 0x30
 800295e:	d064      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15e>
 8002960:	2b30      	cmp	r3, #48	@ 0x30
 8002962:	d86b      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d060      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15e>
 8002968:	2b20      	cmp	r3, #32
 800296a:	d867      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d05c      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15e>
 8002970:	2b10      	cmp	r3, #16
 8002972:	d05a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15e>
 8002974:	e062      	b.n	8002a3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002986:	f000 fc55 	bl	8003234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	609a      	str	r2, [r3, #8]
      break;
 80029a2:	e04f      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b4:	f000 fc3e 	bl	8003234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c6:	609a      	str	r2, [r3, #8]
      break;
 80029c8:	e03c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 fbb2 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2150      	movs	r1, #80	@ 0x50
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fc0b 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 80029e8:	e02c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 fbd1 	bl	800319e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2160      	movs	r1, #96	@ 0x60
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fbfb 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002a08:	e01c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 fb92 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2140      	movs	r1, #64	@ 0x40
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fbeb 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002a28:	e00c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f000 fbe2 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002a3a:	e003      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e000      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a40      	ldr	r2, [pc, #256]	@ (8002b74 <TIM_Base_SetConfig+0x114>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7e:	d00f      	beq.n	8002aa0 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3d      	ldr	r2, [pc, #244]	@ (8002b78 <TIM_Base_SetConfig+0x118>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b7c <TIM_Base_SetConfig+0x11c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <TIM_Base_SetConfig+0x120>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b84 <TIM_Base_SetConfig+0x124>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d108      	bne.n	8002ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8002b74 <TIM_Base_SetConfig+0x114>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01f      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac0:	d01b      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <TIM_Base_SetConfig+0x118>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d017      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <TIM_Base_SetConfig+0x11c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <TIM_Base_SetConfig+0x120>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00f      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a29      	ldr	r2, [pc, #164]	@ (8002b84 <TIM_Base_SetConfig+0x124>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a28      	ldr	r2, [pc, #160]	@ (8002b88 <TIM_Base_SetConfig+0x128>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <TIM_Base_SetConfig+0x12c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0x9a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a26      	ldr	r2, [pc, #152]	@ (8002b90 <TIM_Base_SetConfig+0x130>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a10      	ldr	r2, [pc, #64]	@ (8002b74 <TIM_Base_SetConfig+0x114>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00f      	beq.n	8002b58 <TIM_Base_SetConfig+0xf8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <TIM_Base_SetConfig+0x124>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <TIM_Base_SetConfig+0xf8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a11      	ldr	r2, [pc, #68]	@ (8002b88 <TIM_Base_SetConfig+0x128>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_Base_SetConfig+0xf8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <TIM_Base_SetConfig+0x12c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0xf8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <TIM_Base_SetConfig+0x130>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	615a      	str	r2, [r3, #20]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40000c00 	.word	0x40000c00
 8002b84:	40013400 	.word	0x40013400
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800

08002b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 0201 	bic.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 0302 	bic.w	r3, r3, #2
 8002be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca0 <TIM_OC1_SetConfig+0x10c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00f      	beq.n	8002c14 <TIM_OC1_SetConfig+0x80>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <TIM_OC1_SetConfig+0x110>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <TIM_OC1_SetConfig+0x80>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <TIM_OC1_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <TIM_OC1_SetConfig+0x80>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <TIM_OC1_SetConfig+0x118>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_OC1_SetConfig+0x80>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <TIM_OC1_SetConfig+0x11c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10c      	bne.n	8002c2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0308 	bic.w	r3, r3, #8
 8002c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <TIM_OC1_SetConfig+0x10c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_OC1_SetConfig+0xc2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <TIM_OC1_SetConfig+0x110>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_OC1_SetConfig+0xc2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <TIM_OC1_SetConfig+0x114>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_OC1_SetConfig+0xc2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <TIM_OC1_SetConfig+0x118>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC1_SetConfig+0xc2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <TIM_OC1_SetConfig+0x11c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40013400 	.word	0x40013400
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	40014800 	.word	0x40014800

08002cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f023 0210 	bic.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0320 	bic.w	r3, r3, #32
 8002d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <TIM_OC2_SetConfig+0x100>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_OC2_SetConfig+0x6c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a27      	ldr	r2, [pc, #156]	@ (8002db8 <TIM_OC2_SetConfig+0x104>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10d      	bne.n	8002d3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <TIM_OC2_SetConfig+0x100>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00f      	beq.n	8002d64 <TIM_OC2_SetConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <TIM_OC2_SetConfig+0x104>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_OC2_SetConfig+0xb0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <TIM_OC2_SetConfig+0x108>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_OC2_SetConfig+0xb0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc0 <TIM_OC2_SetConfig+0x10c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_OC2_SetConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <TIM_OC2_SetConfig+0x110>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d113      	bne.n	8002d8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	40013400 	.word	0x40013400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800

08002dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <TIM_OC3_SetConfig+0xfc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_OC3_SetConfig+0x6a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	@ (8002ec8 <TIM_OC3_SetConfig+0x100>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10d      	bne.n	8002e4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <TIM_OC3_SetConfig+0xfc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00f      	beq.n	8002e76 <TIM_OC3_SetConfig+0xae>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <TIM_OC3_SetConfig+0x100>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_OC3_SetConfig+0xae>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <TIM_OC3_SetConfig+0x104>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_OC3_SetConfig+0xae>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <TIM_OC3_SetConfig+0x108>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC3_SetConfig+0xae>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <TIM_OC3_SetConfig+0x10c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <TIM_OC4_SetConfig+0xc0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00f      	beq.n	8002f5c <TIM_OC4_SetConfig+0x84>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <TIM_OC4_SetConfig+0xc4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <TIM_OC4_SetConfig+0x84>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a16      	ldr	r2, [pc, #88]	@ (8002fa0 <TIM_OC4_SetConfig+0xc8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <TIM_OC4_SetConfig+0x84>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <TIM_OC4_SetConfig+0xcc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_OC4_SetConfig+0x84>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a14      	ldr	r2, [pc, #80]	@ (8002fa8 <TIM_OC4_SetConfig+0xd0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d109      	bne.n	8002f70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800

08002fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a17      	ldr	r2, [pc, #92]	@ (8003060 <TIM_OC5_SetConfig+0xb4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00f      	beq.n	8003026 <TIM_OC5_SetConfig+0x7a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <TIM_OC5_SetConfig+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00b      	beq.n	8003026 <TIM_OC5_SetConfig+0x7a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <TIM_OC5_SetConfig+0xbc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <TIM_OC5_SetConfig+0x7a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a14      	ldr	r2, [pc, #80]	@ (800306c <TIM_OC5_SetConfig+0xc0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d003      	beq.n	8003026 <TIM_OC5_SetConfig+0x7a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a13      	ldr	r2, [pc, #76]	@ (8003070 <TIM_OC5_SetConfig+0xc4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d109      	bne.n	800303a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	621a      	str	r2, [r3, #32]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40013400 	.word	0x40013400
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800

08003074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	051b      	lsls	r3, r3, #20
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a18      	ldr	r2, [pc, #96]	@ (800312c <TIM_OC6_SetConfig+0xb8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00f      	beq.n	80030f0 <TIM_OC6_SetConfig+0x7c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <TIM_OC6_SetConfig+0xbc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <TIM_OC6_SetConfig+0x7c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <TIM_OC6_SetConfig+0xc0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <TIM_OC6_SetConfig+0x7c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <TIM_OC6_SetConfig+0xc4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_OC6_SetConfig+0x7c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <TIM_OC6_SetConfig+0xc8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d109      	bne.n	8003104 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	029b      	lsls	r3, r3, #10
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40012c00 	.word	0x40012c00
 8003130:	40013400 	.word	0x40013400
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	f043 0307 	orr.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800324e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2201      	movs	r2, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e068      	b.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334a:	d018      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1b      	ldr	r2, [pc, #108]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1a      	ldr	r2, [pc, #104]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a18      	ldr	r2, [pc, #96]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40013400 	.word	0x40013400
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <memset>:
 80033d0:	4402      	add	r2, r0
 80033d2:	4603      	mov	r3, r0
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	f803 1b01 	strb.w	r1, [r3], #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	@ (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 f818 	bl	8003428 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003480 	.word	0x08003480
 800341c:	08003480 	.word	0x08003480
 8003420:	08003480 	.word	0x08003480
 8003424:	08003484 	.word	0x08003484

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

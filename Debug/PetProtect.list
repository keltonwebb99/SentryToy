
PetProtect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080041c0  080041c0  000051c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e8  080042e8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042ec  080042ec  000052ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000068  08004358  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004358  00006228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acf1  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad8  00000000  00000000  00010d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  00013488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c10  00000000  00000000  00013dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caf2  00000000  00000000  0003a9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee7f1  00000000  00000000  000474d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135cc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b30  00000000  00000000  00135d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00139838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041a8 	.word	0x080041a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080041a8 	.word	0x080041a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fc2a 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8e2 	bl	8000444 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f85e 	bl	8000340 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  StartPWM();
 8000284:	f000 f9de 	bl	8000644 <StartPWM>

  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);

  htim2.Instance->CCR1 = 25;
 8000288:	4b03      	ldr	r3, [pc, #12]	@ (8000298 <main+0x28>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2219      	movs	r2, #25
 800028e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_Delay(100); // Polling delay
 8000290:	2064      	movs	r0, #100	@ 0x64
 8000292:	f000 fc97 	bl	8000bc4 <HAL_Delay>
 8000296:	e7fb      	b.n	8000290 <main+0x20>
 8000298:	20000084 	.word	0x20000084

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b096      	sub	sp, #88	@ 0x58
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2244      	movs	r2, #68	@ 0x44
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 f8e1 	bl	8003472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002c2:	f000 ffcf 	bl	8001264 <HAL_PWREx_ControlVoltageScaling>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002cc:	f000 fa34 	bl	8000738 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	2302      	movs	r3, #2
 80002d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002ea:	230a      	movs	r3, #10
 80002ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 f806 	bl	8001310 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800030a:	f000 fa15 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2303      	movs	r3, #3
 8000314:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	2104      	movs	r1, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fbce 	bl	8001ac8 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 fa01 	bl	8000738 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3758      	adds	r7, #88	@ 0x58
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08e      	sub	sp, #56	@ 0x38
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000354:	f107 031c 	add.w	r3, r7, #28
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000372:	4b33      	ldr	r3, [pc, #204]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800037a:	4b31      	ldr	r3, [pc, #196]	@ (8000440 <MX_TIM2_Init+0x100>)
 800037c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b2f      	ldr	r3, [pc, #188]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000388:	4b2d      	ldr	r3, [pc, #180]	@ (8000440 <MX_TIM2_Init+0x100>)
 800038a:	22c7      	movs	r2, #199	@ 0xc7
 800038c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b2c      	ldr	r3, [pc, #176]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000394:	4b2a      	ldr	r3, [pc, #168]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039a:	4829      	ldr	r0, [pc, #164]	@ (8000440 <MX_TIM2_Init+0x100>)
 800039c:	f001 fd80 	bl	8001ea0 <HAL_TIM_Base_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003a6:	f000 f9c7 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4822      	ldr	r0, [pc, #136]	@ (8000440 <MX_TIM2_Init+0x100>)
 80003b8:	f002 f946 	bl	8002648 <HAL_TIM_ConfigClockSource>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003c2:	f000 f9b9 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003c6:	481e      	ldr	r0, [pc, #120]	@ (8000440 <MX_TIM2_Init+0x100>)
 80003c8:	f001 fdc1 	bl	8001f4e <HAL_TIM_PWM_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003d2:	f000 f9b1 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003de:	f107 031c 	add.w	r3, r7, #28
 80003e2:	4619      	mov	r1, r3
 80003e4:	4816      	ldr	r0, [pc, #88]	@ (8000440 <MX_TIM2_Init+0x100>)
 80003e6:	f002 fe5b 	bl	80030a0 <HAL_TIMEx_MasterConfigSynchronization>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003f0:	f000 f9a2 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f4:	2360      	movs	r3, #96	@ 0x60
 80003f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	@ (8000440 <MX_TIM2_Init+0x100>)
 800040c:	f002 f808 	bl	8002420 <HAL_TIM_PWM_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000416:	f000 f98f 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	2204      	movs	r2, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4807      	ldr	r0, [pc, #28]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000422:	f001 fffd 	bl	8002420 <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800042c:	f000 f984 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000430:	4803      	ldr	r0, [pc, #12]	@ (8000440 <MX_TIM2_Init+0x100>)
 8000432:	f000 f9cf 	bl	80007d4 <HAL_TIM_MspPostInit>

}
 8000436:	bf00      	nop
 8000438:	3738      	adds	r7, #56	@ 0x38
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000084 	.word	0x20000084

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b37      	ldr	r3, [pc, #220]	@ (8000538 <MX_GPIO_Init+0xf4>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a36      	ldr	r2, [pc, #216]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b34      	ldr	r3, [pc, #208]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000472:	4b31      	ldr	r3, [pc, #196]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a30      	ldr	r2, [pc, #192]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047e:	4b2e      	ldr	r3, [pc, #184]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b2b      	ldr	r3, [pc, #172]	@ (8000538 <MX_GPIO_Init+0xf4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a2a      	ldr	r2, [pc, #168]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b28      	ldr	r3, [pc, #160]	@ (8000538 <MX_GPIO_Init+0xf4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b25      	ldr	r3, [pc, #148]	@ (8000538 <MX_GPIO_Init+0xf4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	4a24      	ldr	r2, [pc, #144]	@ (8000538 <MX_GPIO_Init+0xf4>)
 80004a8:	f043 0302 	orr.w	r3, r3, #2
 80004ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ae:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <MX_GPIO_Init+0xf4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	f003 0302 	and.w	r3, r3, #2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	21e0      	movs	r1, #224	@ 0xe0
 80004be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c2:	f000 fe77 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004c6:	23e0      	movs	r3, #224	@ 0xe0
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e0:	f000 fca6 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004ea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fe:	f000 fc97 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000508:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050e:	2301      	movs	r3, #1
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f000 fc88 	bl	8000e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	2017      	movs	r0, #23
 8000526:	f000 fc4c 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800052a:	2017      	movs	r0, #23
 800052c:	f000 fc65 	bl	8000dfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000530:	bf00      	nop
 8000532:	3728      	adds	r7, #40	@ 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <ControlLaser>:

/* USER CODE BEGIN 4 */
void ControlLaser(int state)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d106      	bne.n	8000558 <ControlLaser+0x1c>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	@ 0x40
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f000 fe2f 	bl	80011b4 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
  }
}
 8000556:	e005      	b.n	8000564 <ControlLaser+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f000 fe28 	bl	80011b4 <HAL_GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <ControlFlashlight>:

void ControlFlashlight(int state)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if (state == 1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d106      	bne.n	8000588 <ControlFlashlight+0x1c>
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f000 fe17 	bl	80011b4 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
  }
}
 8000586:	e005      	b.n	8000594 <ControlFlashlight+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f000 fe10 	bl	80011b4 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <MoveServoToRandomPosition>:

void MoveServoToRandomPosition(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  uint16_t position1 = (rand() % (SERVO_MAX - SERVO_MIN + 1)) + SERVO_MIN;
 80005a2:	f002 fe23 	bl	80031ec <rand>
 80005a6:	4601      	mov	r1, r0
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <MoveServoToRandomPosition+0x68>)
 80005aa:	fb83 2301 	smull	r2, r3, r3, r1
 80005ae:	109a      	asrs	r2, r3, #2
 80005b0:	17cb      	asrs	r3, r1, #31
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	4613      	mov	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	00da      	lsls	r2, r3, #3
 80005bc:	1ad2      	subs	r2, r2, r3
 80005be:	1a8a      	subs	r2, r1, r2
 80005c0:	b293      	uxth	r3, r2
 80005c2:	3305      	adds	r3, #5
 80005c4:	80fb      	strh	r3, [r7, #6]
  uint16_t position2 = (rand() % (SERVO_MAX - SERVO_MIN + 1)) + SERVO_MIN;
 80005c6:	f002 fe11 	bl	80031ec <rand>
 80005ca:	4601      	mov	r1, r0
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MoveServoToRandomPosition+0x68>)
 80005ce:	fb83 2301 	smull	r2, r3, r3, r1
 80005d2:	109a      	asrs	r2, r3, #2
 80005d4:	17cb      	asrs	r3, r1, #31
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	00da      	lsls	r2, r3, #3
 80005e0:	1ad2      	subs	r2, r2, r3
 80005e2:	1a8a      	subs	r2, r1, r2
 80005e4:	b293      	uxth	r3, r2
 80005e6:	3305      	adds	r3, #5
 80005e8:	80bb      	strh	r3, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, position1);
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <MoveServoToRandomPosition+0x6c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	88fa      	ldrh	r2, [r7, #6]
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, position2);
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <MoveServoToRandomPosition+0x6c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	88ba      	ldrh	r2, [r7, #4]
 80005f8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	30c30c31 	.word	0x30c30c31
 8000608:	20000084 	.word	0x20000084

0800060c <MoveServoToPosition>:

void MoveServoToPosition(uint16_t position)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	if (position < SERVO_MIN || position > SERVO_MAX) return;
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d90b      	bls.n	8000634 <MoveServoToPosition+0x28>
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	2b19      	cmp	r3, #25
 8000620:	d808      	bhi.n	8000634 <MoveServoToPosition+0x28>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, position);
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MoveServoToPosition+0x34>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	88fa      	ldrh	r2, [r7, #6]
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, position);
 800062a:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <MoveServoToPosition+0x34>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	88fa      	ldrh	r2, [r7, #6]
 8000630:	639a      	str	r2, [r3, #56]	@ 0x38
 8000632:	e000      	b.n	8000636 <MoveServoToPosition+0x2a>
	if (position < SERVO_MIN || position > SERVO_MAX) return;
 8000634:	bf00      	nop
}
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000084 	.word	0x20000084

08000644 <StartPWM>:

void StartPWM(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <StartPWM+0x18>)
 800064c:	f001 fce0 	bl	8002010 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4802      	ldr	r0, [pc, #8]	@ (800065c <StartPWM+0x18>)
 8000654:	f001 fcdc 	bl	8002010 <HAL_TIM_PWM_Start>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_9) // Assuming the external button is connected to PA9
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000670:	d118      	bne.n	80006a4 <HAL_GPIO_EXTI_Callback+0x44>
  {
    system_mode = !system_mode; // Toggle mode
 8000672:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	bf0c      	ite	eq
 800067c:	2301      	moveq	r3, #1
 800067e:	2300      	movne	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000686:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Optional visual feedback
 8000688:	2120      	movs	r1, #32
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f000 fda9 	bl	80011e4 <HAL_GPIO_TogglePin>
    HAL_Delay(200); // Debounce delay
 8000692:	20c8      	movs	r0, #200	@ 0xc8
 8000694:	f000 fa96 	bl	8000bc4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 fda1 	bl	80011e4 <HAL_GPIO_TogglePin>
    {
      ControlLaser(0);
      ControlFlashlight(0);
    }
  }
}
 80006a2:	e040      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0xc6>
  else if (GPIO_Pin == GPIO_PIN_8) // PIR sensor connected to PA8
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006aa:	d13c      	bne.n	8000726 <HAL_GPIO_EXTI_Callback+0xc6>
    pirState1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f000 fd66 	bl	8001184 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <HAL_GPIO_EXTI_Callback+0xd4>)
 80006be:	701a      	strb	r2, [r3, #0]
    if (pirState1 == GPIO_PIN_SET)
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <HAL_GPIO_EXTI_Callback+0xd4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d128      	bne.n	800071a <HAL_GPIO_EXTI_Callback+0xba>
      if (system_mode == PET_MODE)
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d115      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0x9e>
        ControlLaser(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff32 	bl	800053c <ControlLaser>
        for (int i = 0; i < 10; i++) // Example random movement routine
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e008      	b.n	80006f0 <HAL_GPIO_EXTI_Callback+0x90>
          MoveServoToRandomPosition();
 80006de:	f7ff ff5d 	bl	800059c <MoveServoToRandomPosition>
          HAL_Delay(1000); // 1 second between movements
 80006e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e6:	f000 fa6d 	bl	8000bc4 <HAL_Delay>
        for (int i = 0; i < 10; i++) // Example random movement routine
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b09      	cmp	r3, #9
 80006f4:	ddf3      	ble.n	80006de <HAL_GPIO_EXTI_Callback+0x7e>
        ControlLaser(0);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff ff20 	bl	800053c <ControlLaser>
}
 80006fc:	e013      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0xc6>
        ControlFlashlight(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff34 	bl	800056c <ControlFlashlight>
        MoveServoToPosition(SERVO_CENTER);
 8000704:	200f      	movs	r0, #15
 8000706:	f7ff ff81 	bl	800060c <MoveServoToPosition>
        HAL_Delay(10000); // Keep flashlight on for 10 seconds
 800070a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800070e:	f000 fa59 	bl	8000bc4 <HAL_Delay>
        ControlFlashlight(0);
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ff2a 	bl	800056c <ControlFlashlight>
}
 8000718:	e005      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0xc6>
      ControlLaser(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff0e 	bl	800053c <ControlLaser>
      ControlFlashlight(0);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff23 	bl	800056c <ControlFlashlight>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000d1 	.word	0x200000d1
 8000734:	200000d0 	.word	0x200000d0

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <HAL_MspInit+0x44>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <HAL_MspInit+0x44>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6613      	str	r3, [r2, #96]	@ 0x60
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <HAL_MspInit+0x44>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <HAL_MspInit+0x44>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <HAL_MspInit+0x44>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076c:	6593      	str	r3, [r2, #88]	@ 0x58
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_MspInit+0x44>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079c:	d113      	bne.n	80007c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 fb01 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c0:	201c      	movs	r0, #28
 80007c2:	f000 fb1a 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007f4:	d11c      	bne.n	8000830 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_TIM_MspPostInit+0x64>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <HAL_TIM_MspPostInit+0x64>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_TIM_MspPostInit+0x64>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080e:	2303      	movs	r3, #3
 8000810:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f000 fb00 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f977 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800089e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80008a2:	f000 fcb9 	bl	8001218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80008a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008aa:	f000 fcb5 	bl	8001218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <TIM2_IRQHandler+0x10>)
 80008ba:	f001 fcaf 	bl	800221c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000084 	.word	0x20000084

080008c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return 1;
 80008cc:	2301      	movs	r3, #1
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_kill>:

int _kill(int pid, int sig)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008e2:	f002 fe15 	bl	8003510 <__errno>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2216      	movs	r2, #22
 80008ea:	601a      	str	r2, [r3, #0]
  return -1;
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_exit>:

void _exit (int status)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffe7 	bl	80008d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <_exit+0x12>

0800090e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e00a      	b.n	8000936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000920:	f3af 8000 	nop.w
 8000924:	4601      	mov	r1, r0
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	b2ca      	uxtb	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf0      	blt.n	8000920 <_read+0x12>
  }

  return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e009      	b.n	800096e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf1      	blt.n	800095a <_write+0x12>
  }
  return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_close>:

int _close(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a8:	605a      	str	r2, [r3, #4]
  return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_isatty>:

int _isatty(int file)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f002 fd7a 	bl	8003510 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20018000 	.word	0x20018000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	200000d4 	.word	0x200000d4
 8000a50:	20000228 	.word	0x20000228

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 fd39 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fbe1 	bl	8000270 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000abc:	080042f0 	.word	0x080042f0
  ldr r2, =_sbss
 8000ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac4:	20000228 	.word	0x20000228

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_Init+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x3c>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f962 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f80f 	bl	8000b0c <HAL_InitTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	e001      	b.n	8000afe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afa:	f7ff fe23 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d023      	beq.n	8000b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_InitTick+0x70>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f96d 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10f      	bne.n	8000b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d809      	bhi.n	8000b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f937 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_InitTick+0x74>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e007      	b.n	8000b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e001      	b.n	8000b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000d8 	.word	0x200000d8

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200000d8 	.word	0x200000d8

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	@ (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	e17f      	b.n	8001140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8171 	beq.w	800113a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d005      	beq.n	8000e70 <HAL_GPIO_Init+0x40>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d130      	bne.n	8000ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	f003 0201 	and.w	r2, r3, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d118      	bne.n	8000f10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ac 	beq.w	800113a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b5c      	ldr	r3, [pc, #368]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8001164 <HAL_GPIO_Init+0x334>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x242>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	@ (8001168 <HAL_GPIO_Init+0x338>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x23e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4e      	ldr	r2, [pc, #312]	@ (800116c <HAL_GPIO_Init+0x33c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x23a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4d      	ldr	r2, [pc, #308]	@ (8001170 <HAL_GPIO_Init+0x340>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x236>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4c      	ldr	r2, [pc, #304]	@ (8001174 <HAL_GPIO_Init+0x344>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x232>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	@ (8001178 <HAL_GPIO_Init+0x348>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x22e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <HAL_GPIO_Init+0x34c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x22a>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001072:	2300      	movs	r3, #0
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001084:	4937      	ldr	r1, [pc, #220]	@ (8001164 <HAL_GPIO_Init+0x334>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b6:	4a32      	ldr	r2, [pc, #200]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e0:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800110a:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <HAL_GPIO_Init+0x350>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae78 	bne.w	8000e40 <HAL_GPIO_Init+0x10>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000
 8001168:	48000400 	.word	0x48000400
 800116c:	48000800 	.word	0x48000800
 8001170:	48000c00 	.word	0x48000c00
 8001174:	48001000 	.word	0x48001000
 8001178:	48001400 	.word	0x48001400
 800117c:	48001800 	.word	0x48001800
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43d9      	mvns	r1, r3
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	400b      	ands	r3, r1
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa12 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PWREx_GetVoltageRange+0x18>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001272:	d130      	bne.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800127c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001280:	d038      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800128a:	4a1e      	ldr	r2, [pc, #120]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2232      	movs	r2, #50	@ 0x32
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a1b      	ldr	r2, [pc, #108]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0c9b      	lsrs	r3, r3, #18
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a8:	e002      	b.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012bc:	d102      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f2      	bne.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d0:	d110      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e00f      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	d007      	beq.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ec:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e3ca      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001322:	4b97      	ldr	r3, [pc, #604]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132c:	4b94      	ldr	r3, [pc, #592]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80e4 	beq.w	800150c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_RCC_OscConfig+0x4a>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	f040 808b 	bne.w	8001468 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b01      	cmp	r3, #1
 8001356:	f040 8087 	bne.w	8001468 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135a:	4b89      	ldr	r3, [pc, #548]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x62>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e3a2      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1a      	ldr	r2, [r3, #32]
 8001376:	4b82      	ldr	r3, [pc, #520]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_RCC_OscConfig+0x7c>
 8001382:	4b7f      	ldr	r3, [pc, #508]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800138a:	e005      	b.n	8001398 <HAL_RCC_OscConfig+0x88>
 800138c:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001398:	4293      	cmp	r3, r2
 800139a:	d223      	bcs.n	80013e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fd1d 	bl	8001de0 <RCC_SetFlashLatencyFromMSIRange>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e383      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b0:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a72      	ldr	r2, [pc, #456]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	496d      	ldr	r1, [pc, #436]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	4968      	ldr	r1, [pc, #416]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
 80013e2:	e025      	b.n	8001430 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e4:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4960      	ldr	r1, [pc, #384]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001402:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	495b      	ldr	r1, [pc, #364]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fcdd 	bl	8001de0 <RCC_SetFlashLatencyFromMSIRange>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e343      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001430:	f000 fc4a 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b52      	ldr	r3, [pc, #328]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4950      	ldr	r1, [pc, #320]	@ (8001584 <HAL_RCC_OscConfig+0x274>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <HAL_RCC_OscConfig+0x278>)
 800144e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001450:	4b4e      	ldr	r3, [pc, #312]	@ (800158c <HAL_RCC_OscConfig+0x27c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb59 	bl	8000b0c <HAL_InitTick>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d052      	beq.n	800150a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	e327      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d032      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147c:	f7ff fb96 	bl	8000bac <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001484:	f7ff fb92 	bl	8000bac <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e310      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001496:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4931      	ldr	r1, [pc, #196]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	492c      	ldr	r1, [pc, #176]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
 80014d4:	e01a      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a29      	ldr	r2, [pc, #164]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb63 	bl	8000bac <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb5f 	bl	8000bac <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e2dd      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x1da>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d074      	beq.n	8001602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b08      	cmp	r3, #8
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x21a>
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d10e      	bne.n	8001542 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d10b      	bne.n	8001542 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d064      	beq.n	8001600 <HAL_RCC_OscConfig+0x2f0>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d160      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e2ba      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x24a>
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001562:	d115      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800156a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a02      	ldr	r2, [pc, #8]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	080041c0 	.word	0x080041c0
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004
 8001590:	4ba0      	ldr	r3, [pc, #640]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a9f      	ldr	r2, [pc, #636]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b9d      	ldr	r3, [pc, #628]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fafc 	bl	8000bac <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff faf8 	bl	8000bac <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e276      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2a8>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fae8 	bl	8000bac <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fae4 	bl	8000bac <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e262      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2d0>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d060      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x310>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d119      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d116      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x328>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e23f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4973      	ldr	r1, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e040      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff faa3 	bl	8000bac <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fa9f 	bl	8000bac <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e21d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	495f      	ldr	r1, [pc, #380]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff fa7f 	bl	8000bac <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa7b 	bl	8000bac <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1f9      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03c      	beq.n	8001756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01c      	beq.n	800171e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fa5a 	bl	8000bac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fa56 	bl	8000bac <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1d4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ef      	beq.n	80016fc <HAL_RCC_OscConfig+0x3ec>
 800171c:	e01b      	b.n	8001756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001724:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa3d 	bl	8000bac <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fa39 	bl	8000bac <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1b7      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178c:	2301      	movs	r3, #1
 800178e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d118      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa00 	bl	8000bac <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b0:	f7ff f9fc 	bl	8000bac <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e17a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e6:	e029      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d115      	bne.n	800181c <HAL_RCC_OscConfig+0x50c>
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001806:	4a03      	ldr	r2, [pc, #12]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	4b9c      	ldr	r3, [pc, #624]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a9b      	ldr	r2, [pc, #620]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	4b98      	ldr	r3, [pc, #608]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001832:	4a97      	ldr	r2, [pc, #604]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d016      	beq.n	8001872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f9b2 	bl	8000bac <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f9ae 	bl	8000bac <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e12a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	4b8b      	ldr	r3, [pc, #556]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ed      	beq.n	800184c <HAL_RCC_OscConfig+0x53c>
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f99b 	bl	8000bac <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f997 	bl	8000bac <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e113      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	4b7f      	ldr	r3, [pc, #508]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ed      	bne.n	800187a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	4a79      	ldr	r2, [pc, #484]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80fe 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	2b02      	cmp	r3, #2
 80018c0:	f040 80d0 	bne.w	8001a64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018c4:	4b72      	ldr	r3, [pc, #456]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d130      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	3b01      	subs	r3, #1
 80018e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d127      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d11f      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001904:	2a07      	cmp	r2, #7
 8001906:	bf14      	ite	ne
 8001908:	2201      	movne	r2, #1
 800190a:	2200      	moveq	r2, #0
 800190c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190e:	4293      	cmp	r3, r2
 8001910:	d113      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d109      	bne.n	800193a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d06e      	beq.n	8001a18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d069      	beq.n	8001a14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001940:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0ad      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4b      	ldr	r2, [pc, #300]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001968:	f7ff f920 	bl	8000bac <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f91c 	bl	8000bac <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e09a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198e:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800199e:	3a01      	subs	r2, #1
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019a8:	0212      	lsls	r2, r2, #8
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019b0:	0852      	lsrs	r2, r2, #1
 80019b2:	3a01      	subs	r2, #1
 80019b4:	0552      	lsls	r2, r2, #21
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	3a01      	subs	r2, #1
 80019c0:	0652      	lsls	r2, r2, #25
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019c8:	0912      	lsrs	r2, r2, #4
 80019ca:	0452      	lsls	r2, r2, #17
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4930      	ldr	r1, [pc, #192]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ec:	f7ff f8de 	bl	8000bac <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f8da 	bl	8000bac <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e058      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a12:	e050      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e04f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d148      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a3c:	f7ff f8b6 	bl	8000bac <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f8b2 	bl	8000bac <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e030      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x734>
 8001a62:	e028      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d023      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <HAL_RCC_OscConfig+0x780>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f899 	bl	8000bac <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	e00c      	b.n	8001a98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f895 	bl	8000bac <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d905      	bls.n	8001a98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e013      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
 8001a90:	40021000 	.word	0x40021000
 8001a94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4905      	ldr	r1, [pc, #20]	@ (8001ac0 <HAL_RCC_OscConfig+0x7b0>)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_RCC_OscConfig+0x7b4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e001      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	feeefffc 	.word	0xfeeefffc

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0e7      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b75      	ldr	r3, [pc, #468]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4970      	ldr	r1, [pc, #448]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0cf      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4960      	ldr	r1, [pc, #384]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04c      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0a6      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09a      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e08e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e086      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4943      	ldr	r1, [pc, #268]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7fe fffc 	bl	8000bac <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe fff8 	bl	8000bac <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d208      	bcs.n	8001c0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	492b      	ldr	r1, [pc, #172]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d210      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 0207 	bic.w	r2, r3, #7
 8001c24:	4923      	ldr	r1, [pc, #140]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e036      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4918      	ldr	r1, [pc, #96]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7c:	f000 f824 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	490b      	ldr	r1, [pc, #44]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff33 	bl	8000b0c <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080041c0 	.word	0x080041c0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d11e      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d24:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e004      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d134      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d003      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xac>
 8001d6c:	e005      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d76:	617b      	str	r3, [r7, #20]
      break;
 8001d78:	e002      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	617b      	str	r3, [r7, #20]
      break;
 8001d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	0e5b      	lsrs	r3, r3, #25
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	3301      	adds	r3, #1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080041d0 	.word	0x080041d0
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001df8:	f7ff fa26 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001dfc:	6178      	str	r0, [r7, #20]
 8001dfe:	e014      	b.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e18:	f7ff fa16 	bl	8001248 <HAL_PWREx_GetVoltageRange>
 8001e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e30:	d10b      	bne.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b80      	cmp	r3, #128	@ 0x80
 8001e36:	d919      	bls.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e3c:	d902      	bls.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e3e:	2302      	movs	r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e013      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	e010      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	d902      	bls.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e50:	2303      	movs	r3, #3
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e00a      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	d102      	bne.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e004      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b70      	cmp	r3, #112	@ 0x70
 8001e66:	d101      	bne.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e68:	2301      	movs	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0207 	bic.w	r2, r3, #7
 8001e74:	4909      	ldr	r1, [pc, #36]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e7c:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e049      	b.n	8001f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fc60 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 fcae 	bl	8002840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e049      	b.n	8001ff4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f841 	bl	8001ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f000 fc57 	bl	8002840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_TIM_PWM_Start+0x24>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e03c      	b.n	80020ae <HAL_TIM_PWM_Start+0x9e>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d109      	bne.n	800204e <HAL_TIM_PWM_Start+0x3e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	e02f      	b.n	80020ae <HAL_TIM_PWM_Start+0x9e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d109      	bne.n	8002068 <HAL_TIM_PWM_Start+0x58>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e022      	b.n	80020ae <HAL_TIM_PWM_Start+0x9e>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d109      	bne.n	8002082 <HAL_TIM_PWM_Start+0x72>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e015      	b.n	80020ae <HAL_TIM_PWM_Start+0x9e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d109      	bne.n	800209c <HAL_TIM_PWM_Start+0x8c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e008      	b.n	80020ae <HAL_TIM_PWM_Start+0x9e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e09c      	b.n	80021f0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0xb6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c4:	e023      	b.n	800210e <HAL_TIM_PWM_Start+0xfe>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0xc6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d4:	e01b      	b.n	800210e <HAL_TIM_PWM_Start+0xfe>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0xd6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e4:	e013      	b.n	800210e <HAL_TIM_PWM_Start+0xfe>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start+0xe6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020f4:	e00b      	b.n	800210e <HAL_TIM_PWM_Start+0xfe>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0xf6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002104:	e003      	b.n	800210e <HAL_TIM_PWM_Start+0xfe>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 ff9c 	bl	8003054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <HAL_TIM_PWM_Start+0x1e8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_TIM_PWM_Start+0x13e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a34      	ldr	r2, [pc, #208]	@ (80021fc <HAL_TIM_PWM_Start+0x1ec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_TIM_PWM_Start+0x13e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <HAL_TIM_PWM_Start+0x1f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_TIM_PWM_Start+0x13e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a31      	ldr	r2, [pc, #196]	@ (8002204 <HAL_TIM_PWM_Start+0x1f4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_TIM_PWM_Start+0x13e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_TIM_PWM_Start+0x1f8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_TIM_PWM_Start+0x142>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_TIM_PWM_Start+0x144>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <HAL_TIM_PWM_Start+0x1e8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01d      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217a:	d018      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a22      	ldr	r2, [pc, #136]	@ (800220c <HAL_TIM_PWM_Start+0x1fc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_TIM_PWM_Start+0x200>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00e      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1f      	ldr	r2, [pc, #124]	@ (8002214 <HAL_TIM_PWM_Start+0x204>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_TIM_PWM_Start+0x1ec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_TIM_PWM_Start+0x19e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a15      	ldr	r2, [pc, #84]	@ (8002200 <HAL_TIM_PWM_Start+0x1f0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d115      	bne.n	80021da <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_TIM_PWM_Start+0x208>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b06      	cmp	r3, #6
 80021be:	d015      	beq.n	80021ec <HAL_TIM_PWM_Start+0x1dc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c6:	d011      	beq.n	80021ec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	e008      	b.n	80021ec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e000      	b.n	80021ee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40013400 	.word	0x40013400
 8002200:	40014000 	.word	0x40014000
 8002204:	40014400 	.word	0x40014400
 8002208:	40014800 	.word	0x40014800
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	00010007 	.word	0x00010007

0800221c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 facb 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fabd 	bl	80027ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 face 	bl	8002816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0204 	mvn.w	r2, #4
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 faa5 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa97 	bl	80027ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 faa8 	bl	8002816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d020      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0208 	mvn.w	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa7f 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa71 	bl	80027ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fa82 	bl	8002816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0210 	mvn.w	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2208      	movs	r2, #8
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa59 	bl	8002802 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa4b 	bl	80027ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fa5c 	bl	8002816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0201 	mvn.w	r2, #1
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa29 	bl	80027da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 ff0c 	bl	80031c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 ff04 	bl	80031d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa1b 	bl	800282a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0220 	mvn.w	r2, #32
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fecc 	bl	80031b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800243a:	2302      	movs	r3, #2
 800243c:	e0ff      	b.n	800263e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b14      	cmp	r3, #20
 800244a:	f200 80f0 	bhi.w	800262e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800244e:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	080024a9 	.word	0x080024a9
 8002458:	0800262f 	.word	0x0800262f
 800245c:	0800262f 	.word	0x0800262f
 8002460:	0800262f 	.word	0x0800262f
 8002464:	080024e9 	.word	0x080024e9
 8002468:	0800262f 	.word	0x0800262f
 800246c:	0800262f 	.word	0x0800262f
 8002470:	0800262f 	.word	0x0800262f
 8002474:	0800252b 	.word	0x0800252b
 8002478:	0800262f 	.word	0x0800262f
 800247c:	0800262f 	.word	0x0800262f
 8002480:	0800262f 	.word	0x0800262f
 8002484:	0800256b 	.word	0x0800256b
 8002488:	0800262f 	.word	0x0800262f
 800248c:	0800262f 	.word	0x0800262f
 8002490:	0800262f 	.word	0x0800262f
 8002494:	080025ad 	.word	0x080025ad
 8002498:	0800262f 	.word	0x0800262f
 800249c:	0800262f 	.word	0x0800262f
 80024a0:	0800262f 	.word	0x0800262f
 80024a4:	080025ed 	.word	0x080025ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fa60 	bl	8002974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6999      	ldr	r1, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	619a      	str	r2, [r3, #24]
      break;
 80024e6:	e0a5      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fad0 	bl	8002a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6999      	ldr	r1, [r3, #24]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	021a      	lsls	r2, r3, #8
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	619a      	str	r2, [r3, #24]
      break;
 8002528:	e084      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fb39 	bl	8002ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0208 	orr.w	r2, r2, #8
 8002544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0204 	bic.w	r2, r2, #4
 8002554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69d9      	ldr	r1, [r3, #28]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
      break;
 8002568:	e064      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fba1 	bl	8002cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69d9      	ldr	r1, [r3, #28]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	61da      	str	r2, [r3, #28]
      break;
 80025aa:	e043      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fbea 	bl	8002d8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0208 	orr.w	r2, r2, #8
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80025ea:	e023      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fc2e 	bl	8002e54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800262c:	e002      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
      break;
 8002632:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop

08002648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIM_ConfigClockSource+0x1c>
 8002660:	2302      	movs	r3, #2
 8002662:	e0b6      	b.n	80027d2 <HAL_TIM_ConfigClockSource+0x18a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002682:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800268e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a0:	d03e      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0xd8>
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a6:	f200 8087 	bhi.w	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ae:	f000 8086 	beq.w	80027be <HAL_TIM_ConfigClockSource+0x176>
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026b6:	d87f      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026b8:	2b70      	cmp	r3, #112	@ 0x70
 80026ba:	d01a      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xaa>
 80026bc:	2b70      	cmp	r3, #112	@ 0x70
 80026be:	d87b      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026c0:	2b60      	cmp	r3, #96	@ 0x60
 80026c2:	d050      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x11e>
 80026c4:	2b60      	cmp	r3, #96	@ 0x60
 80026c6:	d877      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026c8:	2b50      	cmp	r3, #80	@ 0x50
 80026ca:	d03c      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0xfe>
 80026cc:	2b50      	cmp	r3, #80	@ 0x50
 80026ce:	d873      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026d0:	2b40      	cmp	r3, #64	@ 0x40
 80026d2:	d058      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x13e>
 80026d4:	2b40      	cmp	r3, #64	@ 0x40
 80026d6:	d86f      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026d8:	2b30      	cmp	r3, #48	@ 0x30
 80026da:	d064      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x15e>
 80026dc:	2b30      	cmp	r3, #48	@ 0x30
 80026de:	d86b      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d060      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x15e>
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d867      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x15e>
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d05a      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x15e>
 80026f0:	e062      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002702:	f000 fc87 	bl	8003014 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	609a      	str	r2, [r3, #8]
      break;
 800271e:	e04f      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	f000 fc70 	bl	8003014 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002742:	609a      	str	r2, [r3, #8]
      break;
 8002744:	e03c      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	461a      	mov	r2, r3
 8002754:	f000 fbe4 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2150      	movs	r1, #80	@ 0x50
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc3d 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 8002764:	e02c      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	461a      	mov	r2, r3
 8002774:	f000 fc03 	bl	8002f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2160      	movs	r1, #96	@ 0x60
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fc2d 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 8002784:	e01c      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	461a      	mov	r2, r3
 8002794:	f000 fbc4 	bl	8002f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2140      	movs	r1, #64	@ 0x40
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fc1d 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 80027a4:	e00c      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f000 fc14 	bl	8002fde <TIM_ITRx_SetConfig>
      break;
 80027b6:	e003      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e000      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80027be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <TIM_Base_SetConfig+0x114>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285e:	d00f      	beq.n	8002880 <TIM_Base_SetConfig+0x40>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3d      	ldr	r2, [pc, #244]	@ (8002958 <TIM_Base_SetConfig+0x118>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00b      	beq.n	8002880 <TIM_Base_SetConfig+0x40>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3c      	ldr	r2, [pc, #240]	@ (800295c <TIM_Base_SetConfig+0x11c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <TIM_Base_SetConfig+0x120>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <TIM_Base_SetConfig+0x124>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d108      	bne.n	8002892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <TIM_Base_SetConfig+0x114>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a0:	d01b      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002958 <TIM_Base_SetConfig+0x118>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d017      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2b      	ldr	r2, [pc, #172]	@ (800295c <TIM_Base_SetConfig+0x11c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <TIM_Base_SetConfig+0x120>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00f      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a29      	ldr	r2, [pc, #164]	@ (8002964 <TIM_Base_SetConfig+0x124>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <TIM_Base_SetConfig+0x128>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a27      	ldr	r2, [pc, #156]	@ (800296c <TIM_Base_SetConfig+0x12c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0x9a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a26      	ldr	r2, [pc, #152]	@ (8002970 <TIM_Base_SetConfig+0x130>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <TIM_Base_SetConfig+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00f      	beq.n	8002938 <TIM_Base_SetConfig+0xf8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <TIM_Base_SetConfig+0x124>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00b      	beq.n	8002938 <TIM_Base_SetConfig+0xf8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <TIM_Base_SetConfig+0x128>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0xf8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a10      	ldr	r2, [pc, #64]	@ (800296c <TIM_Base_SetConfig+0x12c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0xf8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <TIM_Base_SetConfig+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d103      	bne.n	8002940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	615a      	str	r2, [r3, #20]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800

08002974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0201 	bic.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 0302 	bic.w	r3, r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002a80 <TIM_OC1_SetConfig+0x10c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00f      	beq.n	80029f4 <TIM_OC1_SetConfig+0x80>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <TIM_OC1_SetConfig+0x110>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_OC1_SetConfig+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <TIM_OC1_SetConfig+0x114>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_OC1_SetConfig+0x80>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <TIM_OC1_SetConfig+0x118>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_OC1_SetConfig+0x80>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <TIM_OC1_SetConfig+0x11c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10c      	bne.n	8002a0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0308 	bic.w	r3, r3, #8
 80029fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <TIM_OC1_SetConfig+0x10c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_OC1_SetConfig+0xc2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <TIM_OC1_SetConfig+0x110>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_OC1_SetConfig+0xc2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <TIM_OC1_SetConfig+0x114>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_OC1_SetConfig+0xc2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a18      	ldr	r2, [pc, #96]	@ (8002a8c <TIM_OC1_SetConfig+0x118>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_OC1_SetConfig+0xc2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a17      	ldr	r2, [pc, #92]	@ (8002a90 <TIM_OC1_SetConfig+0x11c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d111      	bne.n	8002a5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	621a      	str	r2, [r3, #32]
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40013400 	.word	0x40013400
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	40014800 	.word	0x40014800

08002a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 0210 	bic.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0320 	bic.w	r3, r3, #32
 8002ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a28      	ldr	r2, [pc, #160]	@ (8002b94 <TIM_OC2_SetConfig+0x100>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_OC2_SetConfig+0x6c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <TIM_OC2_SetConfig+0x104>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10d      	bne.n	8002b1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <TIM_OC2_SetConfig+0x100>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00f      	beq.n	8002b44 <TIM_OC2_SetConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <TIM_OC2_SetConfig+0x104>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00b      	beq.n	8002b44 <TIM_OC2_SetConfig+0xb0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <TIM_OC2_SetConfig+0x108>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <TIM_OC2_SetConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <TIM_OC2_SetConfig+0x10c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <TIM_OC2_SetConfig+0xb0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ba4 <TIM_OC2_SetConfig+0x110>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d113      	bne.n	8002b6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40013400 	.word	0x40013400
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800

08002ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <TIM_OC3_SetConfig+0xfc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_OC3_SetConfig+0x6a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <TIM_OC3_SetConfig+0x100>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10d      	bne.n	8002c2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <TIM_OC3_SetConfig+0xfc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_OC3_SetConfig+0xae>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <TIM_OC3_SetConfig+0x100>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_OC3_SetConfig+0xae>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <TIM_OC3_SetConfig+0x104>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_OC3_SetConfig+0xae>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <TIM_OC3_SetConfig+0x108>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC3_SetConfig+0xae>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <TIM_OC3_SetConfig+0x10c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d113      	bne.n	8002c7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40013400 	.word	0x40013400
 8002cac:	40014000 	.word	0x40014000
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800

08002cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	031b      	lsls	r3, r3, #12
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <TIM_OC4_SetConfig+0xc0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00f      	beq.n	8002d3c <TIM_OC4_SetConfig+0x84>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <TIM_OC4_SetConfig+0xc4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_OC4_SetConfig+0x84>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <TIM_OC4_SetConfig+0xc8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_OC4_SetConfig+0x84>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <TIM_OC4_SetConfig+0xcc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_OC4_SetConfig+0x84>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <TIM_OC4_SetConfig+0xd0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d109      	bne.n	8002d50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40012c00 	.word	0x40012c00
 8002d7c:	40013400 	.word	0x40013400
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800

08002d8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002dd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <TIM_OC5_SetConfig+0xb4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00f      	beq.n	8002e06 <TIM_OC5_SetConfig+0x7a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <TIM_OC5_SetConfig+0xb8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <TIM_OC5_SetConfig+0x7a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <TIM_OC5_SetConfig+0xbc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <TIM_OC5_SetConfig+0x7a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <TIM_OC5_SetConfig+0xc0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_OC5_SetConfig+0x7a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <TIM_OC5_SetConfig+0xc4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d109      	bne.n	8002e1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800

08002e54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	@ (8002f0c <TIM_OC6_SetConfig+0xb8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00f      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x7c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <TIM_OC6_SetConfig+0xbc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x7c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <TIM_OC6_SetConfig+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x7c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a15      	ldr	r2, [pc, #84]	@ (8002f18 <TIM_OC6_SetConfig+0xc4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_OC6_SetConfig+0x7c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <TIM_OC6_SetConfig+0xc8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40013400 	.word	0x40013400
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800

08002f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0201 	bic.w	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 030a 	bic.w	r3, r3, #10
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 0210 	bic.w	r2, r3, #16
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	031b      	lsls	r3, r3, #12
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	621a      	str	r2, [r3, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f043 0307 	orr.w	r3, r3, #7
 8003000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800302e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	021a      	lsls	r2, r3, #8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	431a      	orrs	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2201      	movs	r2, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e068      	b.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80030f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003104:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1e      	ldr	r2, [pc, #120]	@ (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01d      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d018      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1b      	ldr	r2, [pc, #108]	@ (80031a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a13      	ldr	r2, [pc, #76]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a14      	ldr	r2, [pc, #80]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10c      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40013400 	.word	0x40013400
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40014000 	.word	0x40014000

080031b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <rand>:
 80031ec:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <rand+0x5c>)
 80031ee:	b510      	push	{r4, lr}
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031f4:	b9b3      	cbnz	r3, 8003224 <rand+0x38>
 80031f6:	2018      	movs	r0, #24
 80031f8:	f000 fa20 	bl	800363c <malloc>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8003200:	b920      	cbnz	r0, 800320c <rand+0x20>
 8003202:	4b12      	ldr	r3, [pc, #72]	@ (800324c <rand+0x60>)
 8003204:	4812      	ldr	r0, [pc, #72]	@ (8003250 <rand+0x64>)
 8003206:	2152      	movs	r1, #82	@ 0x52
 8003208:	f000 f9b0 	bl	800356c <__assert_func>
 800320c:	4911      	ldr	r1, [pc, #68]	@ (8003254 <rand+0x68>)
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <rand+0x6c>)
 8003210:	e9c0 1300 	strd	r1, r3, [r0]
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <rand+0x70>)
 8003216:	6083      	str	r3, [r0, #8]
 8003218:	230b      	movs	r3, #11
 800321a:	8183      	strh	r3, [r0, #12]
 800321c:	2100      	movs	r1, #0
 800321e:	2001      	movs	r0, #1
 8003220:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003224:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003226:	480e      	ldr	r0, [pc, #56]	@ (8003260 <rand+0x74>)
 8003228:	690b      	ldr	r3, [r1, #16]
 800322a:	694c      	ldr	r4, [r1, #20]
 800322c:	4a0d      	ldr	r2, [pc, #52]	@ (8003264 <rand+0x78>)
 800322e:	4358      	muls	r0, r3
 8003230:	fb02 0004 	mla	r0, r2, r4, r0
 8003234:	fba3 3202 	umull	r3, r2, r3, r2
 8003238:	3301      	adds	r3, #1
 800323a:	eb40 0002 	adc.w	r0, r0, r2
 800323e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003242:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003246:	bd10      	pop	{r4, pc}
 8003248:	20000018 	.word	0x20000018
 800324c:	08004200 	.word	0x08004200
 8003250:	08004217 	.word	0x08004217
 8003254:	abcd330e 	.word	0xabcd330e
 8003258:	e66d1234 	.word	0xe66d1234
 800325c:	0005deec 	.word	0x0005deec
 8003260:	5851f42d 	.word	0x5851f42d
 8003264:	4c957f2d 	.word	0x4c957f2d

08003268 <std>:
 8003268:	2300      	movs	r3, #0
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	e9c0 3300 	strd	r3, r3, [r0]
 8003272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003276:	6083      	str	r3, [r0, #8]
 8003278:	8181      	strh	r1, [r0, #12]
 800327a:	6643      	str	r3, [r0, #100]	@ 0x64
 800327c:	81c2      	strh	r2, [r0, #14]
 800327e:	6183      	str	r3, [r0, #24]
 8003280:	4619      	mov	r1, r3
 8003282:	2208      	movs	r2, #8
 8003284:	305c      	adds	r0, #92	@ 0x5c
 8003286:	f000 f8f4 	bl	8003472 <memset>
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <std+0x58>)
 800328c:	6263      	str	r3, [r4, #36]	@ 0x24
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <std+0x5c>)
 8003290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <std+0x60>)
 8003294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <std+0x64>)
 8003298:	6323      	str	r3, [r4, #48]	@ 0x30
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <std+0x68>)
 800329c:	6224      	str	r4, [r4, #32]
 800329e:	429c      	cmp	r4, r3
 80032a0:	d006      	beq.n	80032b0 <std+0x48>
 80032a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032a6:	4294      	cmp	r4, r2
 80032a8:	d002      	beq.n	80032b0 <std+0x48>
 80032aa:	33d0      	adds	r3, #208	@ 0xd0
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d105      	bne.n	80032bc <std+0x54>
 80032b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b8:	f000 b954 	b.w	8003564 <__retarget_lock_init_recursive>
 80032bc:	bd10      	pop	{r4, pc}
 80032be:	bf00      	nop
 80032c0:	080033ed 	.word	0x080033ed
 80032c4:	0800340f 	.word	0x0800340f
 80032c8:	08003447 	.word	0x08003447
 80032cc:	0800346b 	.word	0x0800346b
 80032d0:	200000dc 	.word	0x200000dc

080032d4 <stdio_exit_handler>:
 80032d4:	4a02      	ldr	r2, [pc, #8]	@ (80032e0 <stdio_exit_handler+0xc>)
 80032d6:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <stdio_exit_handler+0x10>)
 80032d8:	4803      	ldr	r0, [pc, #12]	@ (80032e8 <stdio_exit_handler+0x14>)
 80032da:	f000 b869 	b.w	80033b0 <_fwalk_sglue>
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c
 80032e4:	080038b1 	.word	0x080038b1
 80032e8:	2000001c 	.word	0x2000001c

080032ec <cleanup_stdio>:
 80032ec:	6841      	ldr	r1, [r0, #4]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <cleanup_stdio+0x34>)
 80032f0:	4299      	cmp	r1, r3
 80032f2:	b510      	push	{r4, lr}
 80032f4:	4604      	mov	r4, r0
 80032f6:	d001      	beq.n	80032fc <cleanup_stdio+0x10>
 80032f8:	f000 fada 	bl	80038b0 <_fflush_r>
 80032fc:	68a1      	ldr	r1, [r4, #8]
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <cleanup_stdio+0x38>)
 8003300:	4299      	cmp	r1, r3
 8003302:	d002      	beq.n	800330a <cleanup_stdio+0x1e>
 8003304:	4620      	mov	r0, r4
 8003306:	f000 fad3 	bl	80038b0 <_fflush_r>
 800330a:	68e1      	ldr	r1, [r4, #12]
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <cleanup_stdio+0x3c>)
 800330e:	4299      	cmp	r1, r3
 8003310:	d004      	beq.n	800331c <cleanup_stdio+0x30>
 8003312:	4620      	mov	r0, r4
 8003314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003318:	f000 baca 	b.w	80038b0 <_fflush_r>
 800331c:	bd10      	pop	{r4, pc}
 800331e:	bf00      	nop
 8003320:	200000dc 	.word	0x200000dc
 8003324:	20000144 	.word	0x20000144
 8003328:	200001ac 	.word	0x200001ac

0800332c <global_stdio_init.part.0>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <global_stdio_init.part.0+0x30>)
 8003330:	4c0b      	ldr	r4, [pc, #44]	@ (8003360 <global_stdio_init.part.0+0x34>)
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <global_stdio_init.part.0+0x38>)
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4620      	mov	r0, r4
 8003338:	2200      	movs	r2, #0
 800333a:	2104      	movs	r1, #4
 800333c:	f7ff ff94 	bl	8003268 <std>
 8003340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003344:	2201      	movs	r2, #1
 8003346:	2109      	movs	r1, #9
 8003348:	f7ff ff8e 	bl	8003268 <std>
 800334c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003350:	2202      	movs	r2, #2
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003356:	2112      	movs	r1, #18
 8003358:	f7ff bf86 	b.w	8003268 <std>
 800335c:	20000214 	.word	0x20000214
 8003360:	200000dc 	.word	0x200000dc
 8003364:	080032d5 	.word	0x080032d5

08003368 <__sfp_lock_acquire>:
 8003368:	4801      	ldr	r0, [pc, #4]	@ (8003370 <__sfp_lock_acquire+0x8>)
 800336a:	f000 b8fc 	b.w	8003566 <__retarget_lock_acquire_recursive>
 800336e:	bf00      	nop
 8003370:	2000021d 	.word	0x2000021d

08003374 <__sfp_lock_release>:
 8003374:	4801      	ldr	r0, [pc, #4]	@ (800337c <__sfp_lock_release+0x8>)
 8003376:	f000 b8f7 	b.w	8003568 <__retarget_lock_release_recursive>
 800337a:	bf00      	nop
 800337c:	2000021d 	.word	0x2000021d

08003380 <__sinit>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4604      	mov	r4, r0
 8003384:	f7ff fff0 	bl	8003368 <__sfp_lock_acquire>
 8003388:	6a23      	ldr	r3, [r4, #32]
 800338a:	b11b      	cbz	r3, 8003394 <__sinit+0x14>
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f7ff bff0 	b.w	8003374 <__sfp_lock_release>
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__sinit+0x28>)
 8003396:	6223      	str	r3, [r4, #32]
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <__sinit+0x2c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f5      	bne.n	800338c <__sinit+0xc>
 80033a0:	f7ff ffc4 	bl	800332c <global_stdio_init.part.0>
 80033a4:	e7f2      	b.n	800338c <__sinit+0xc>
 80033a6:	bf00      	nop
 80033a8:	080032ed 	.word	0x080032ed
 80033ac:	20000214 	.word	0x20000214

080033b0 <_fwalk_sglue>:
 80033b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	4607      	mov	r7, r0
 80033b6:	4688      	mov	r8, r1
 80033b8:	4614      	mov	r4, r2
 80033ba:	2600      	movs	r6, #0
 80033bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033c0:	f1b9 0901 	subs.w	r9, r9, #1
 80033c4:	d505      	bpl.n	80033d2 <_fwalk_sglue+0x22>
 80033c6:	6824      	ldr	r4, [r4, #0]
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	d1f7      	bne.n	80033bc <_fwalk_sglue+0xc>
 80033cc:	4630      	mov	r0, r6
 80033ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d2:	89ab      	ldrh	r3, [r5, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d907      	bls.n	80033e8 <_fwalk_sglue+0x38>
 80033d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033dc:	3301      	adds	r3, #1
 80033de:	d003      	beq.n	80033e8 <_fwalk_sglue+0x38>
 80033e0:	4629      	mov	r1, r5
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	4306      	orrs	r6, r0
 80033e8:	3568      	adds	r5, #104	@ 0x68
 80033ea:	e7e9      	b.n	80033c0 <_fwalk_sglue+0x10>

080033ec <__sread>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	460c      	mov	r4, r1
 80033f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f4:	f000 f868 	bl	80034c8 <_read_r>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	bfab      	itete	ge
 80033fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003400:	181b      	addge	r3, r3, r0
 8003402:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003406:	bfac      	ite	ge
 8003408:	6563      	strge	r3, [r4, #84]	@ 0x54
 800340a:	81a3      	strhlt	r3, [r4, #12]
 800340c:	bd10      	pop	{r4, pc}

0800340e <__swrite>:
 800340e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003412:	461f      	mov	r7, r3
 8003414:	898b      	ldrh	r3, [r1, #12]
 8003416:	05db      	lsls	r3, r3, #23
 8003418:	4605      	mov	r5, r0
 800341a:	460c      	mov	r4, r1
 800341c:	4616      	mov	r6, r2
 800341e:	d505      	bpl.n	800342c <__swrite+0x1e>
 8003420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003424:	2302      	movs	r3, #2
 8003426:	2200      	movs	r2, #0
 8003428:	f000 f83c 	bl	80034a4 <_lseek_r>
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	4632      	mov	r2, r6
 800343a:	463b      	mov	r3, r7
 800343c:	4628      	mov	r0, r5
 800343e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003442:	f000 b853 	b.w	80034ec <_write_r>

08003446 <__sseek>:
 8003446:	b510      	push	{r4, lr}
 8003448:	460c      	mov	r4, r1
 800344a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344e:	f000 f829 	bl	80034a4 <_lseek_r>
 8003452:	1c43      	adds	r3, r0, #1
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	bf15      	itete	ne
 8003458:	6560      	strne	r0, [r4, #84]	@ 0x54
 800345a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800345e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003462:	81a3      	strheq	r3, [r4, #12]
 8003464:	bf18      	it	ne
 8003466:	81a3      	strhne	r3, [r4, #12]
 8003468:	bd10      	pop	{r4, pc}

0800346a <__sclose>:
 800346a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346e:	f000 b809 	b.w	8003484 <_close_r>

08003472 <memset>:
 8003472:	4402      	add	r2, r0
 8003474:	4603      	mov	r3, r0
 8003476:	4293      	cmp	r3, r2
 8003478:	d100      	bne.n	800347c <memset+0xa>
 800347a:	4770      	bx	lr
 800347c:	f803 1b01 	strb.w	r1, [r3], #1
 8003480:	e7f9      	b.n	8003476 <memset+0x4>
	...

08003484 <_close_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4d06      	ldr	r5, [pc, #24]	@ (80034a0 <_close_r+0x1c>)
 8003488:	2300      	movs	r3, #0
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	602b      	str	r3, [r5, #0]
 8003490:	f7fd fa76 	bl	8000980 <_close>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d102      	bne.n	800349e <_close_r+0x1a>
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	b103      	cbz	r3, 800349e <_close_r+0x1a>
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	20000218 	.word	0x20000218

080034a4 <_lseek_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	4d07      	ldr	r5, [pc, #28]	@ (80034c4 <_lseek_r+0x20>)
 80034a8:	4604      	mov	r4, r0
 80034aa:	4608      	mov	r0, r1
 80034ac:	4611      	mov	r1, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	602a      	str	r2, [r5, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f7fd fa8b 	bl	80009ce <_lseek>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_lseek_r+0x1e>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_lseek_r+0x1e>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	20000218 	.word	0x20000218

080034c8 <_read_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4d07      	ldr	r5, [pc, #28]	@ (80034e8 <_read_r+0x20>)
 80034cc:	4604      	mov	r4, r0
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	2200      	movs	r2, #0
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd fa19 	bl	800090e <_read>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_read_r+0x1e>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_read_r+0x1e>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	20000218 	.word	0x20000218

080034ec <_write_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4d07      	ldr	r5, [pc, #28]	@ (800350c <_write_r+0x20>)
 80034f0:	4604      	mov	r4, r0
 80034f2:	4608      	mov	r0, r1
 80034f4:	4611      	mov	r1, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7fd fa24 	bl	8000948 <_write>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_write_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_write_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	20000218 	.word	0x20000218

08003510 <__errno>:
 8003510:	4b01      	ldr	r3, [pc, #4]	@ (8003518 <__errno+0x8>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000018 	.word	0x20000018

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4d0d      	ldr	r5, [pc, #52]	@ (8003554 <__libc_init_array+0x38>)
 8003520:	4c0d      	ldr	r4, [pc, #52]	@ (8003558 <__libc_init_array+0x3c>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	2600      	movs	r6, #0
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	4d0b      	ldr	r5, [pc, #44]	@ (800355c <__libc_init_array+0x40>)
 800352e:	4c0c      	ldr	r4, [pc, #48]	@ (8003560 <__libc_init_array+0x44>)
 8003530:	f000 fe3a 	bl	80041a8 <_init>
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	2600      	movs	r6, #0
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080042e8 	.word	0x080042e8
 8003558:	080042e8 	.word	0x080042e8
 800355c:	080042e8 	.word	0x080042e8
 8003560:	080042ec 	.word	0x080042ec

08003564 <__retarget_lock_init_recursive>:
 8003564:	4770      	bx	lr

08003566 <__retarget_lock_acquire_recursive>:
 8003566:	4770      	bx	lr

08003568 <__retarget_lock_release_recursive>:
 8003568:	4770      	bx	lr
	...

0800356c <__assert_func>:
 800356c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800356e:	4614      	mov	r4, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <__assert_func+0x2c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4605      	mov	r5, r0
 8003578:	68d8      	ldr	r0, [r3, #12]
 800357a:	b954      	cbnz	r4, 8003592 <__assert_func+0x26>
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <__assert_func+0x30>)
 800357e:	461c      	mov	r4, r3
 8003580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003584:	9100      	str	r1, [sp, #0]
 8003586:	462b      	mov	r3, r5
 8003588:	4905      	ldr	r1, [pc, #20]	@ (80035a0 <__assert_func+0x34>)
 800358a:	f000 f9b9 	bl	8003900 <fiprintf>
 800358e:	f000 f9d9 	bl	8003944 <abort>
 8003592:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <__assert_func+0x38>)
 8003594:	e7f4      	b.n	8003580 <__assert_func+0x14>
 8003596:	bf00      	nop
 8003598:	20000018 	.word	0x20000018
 800359c:	080042aa 	.word	0x080042aa
 80035a0:	0800427c 	.word	0x0800427c
 80035a4:	0800426f 	.word	0x0800426f

080035a8 <_free_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	4605      	mov	r5, r0
 80035ac:	2900      	cmp	r1, #0
 80035ae:	d041      	beq.n	8003634 <_free_r+0x8c>
 80035b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b4:	1f0c      	subs	r4, r1, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bfb8      	it	lt
 80035ba:	18e4      	addlt	r4, r4, r3
 80035bc:	f000 f8e8 	bl	8003790 <__malloc_lock>
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <_free_r+0x90>)
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	b933      	cbnz	r3, 80035d4 <_free_r+0x2c>
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	6014      	str	r4, [r2, #0]
 80035ca:	4628      	mov	r0, r5
 80035cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035d0:	f000 b8e4 	b.w	800379c <__malloc_unlock>
 80035d4:	42a3      	cmp	r3, r4
 80035d6:	d908      	bls.n	80035ea <_free_r+0x42>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428b      	cmp	r3, r1
 80035de:	bf01      	itttt	eq
 80035e0:	6819      	ldreq	r1, [r3, #0]
 80035e2:	685b      	ldreq	r3, [r3, #4]
 80035e4:	1809      	addeq	r1, r1, r0
 80035e6:	6021      	streq	r1, [r4, #0]
 80035e8:	e7ed      	b.n	80035c6 <_free_r+0x1e>
 80035ea:	461a      	mov	r2, r3
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b10b      	cbz	r3, 80035f4 <_free_r+0x4c>
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	d9fa      	bls.n	80035ea <_free_r+0x42>
 80035f4:	6811      	ldr	r1, [r2, #0]
 80035f6:	1850      	adds	r0, r2, r1
 80035f8:	42a0      	cmp	r0, r4
 80035fa:	d10b      	bne.n	8003614 <_free_r+0x6c>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	4401      	add	r1, r0
 8003600:	1850      	adds	r0, r2, r1
 8003602:	4283      	cmp	r3, r0
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	d1e0      	bne.n	80035ca <_free_r+0x22>
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6053      	str	r3, [r2, #4]
 800360e:	4408      	add	r0, r1
 8003610:	6010      	str	r0, [r2, #0]
 8003612:	e7da      	b.n	80035ca <_free_r+0x22>
 8003614:	d902      	bls.n	800361c <_free_r+0x74>
 8003616:	230c      	movs	r3, #12
 8003618:	602b      	str	r3, [r5, #0]
 800361a:	e7d6      	b.n	80035ca <_free_r+0x22>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	1821      	adds	r1, r4, r0
 8003620:	428b      	cmp	r3, r1
 8003622:	bf04      	itt	eq
 8003624:	6819      	ldreq	r1, [r3, #0]
 8003626:	685b      	ldreq	r3, [r3, #4]
 8003628:	6063      	str	r3, [r4, #4]
 800362a:	bf04      	itt	eq
 800362c:	1809      	addeq	r1, r1, r0
 800362e:	6021      	streq	r1, [r4, #0]
 8003630:	6054      	str	r4, [r2, #4]
 8003632:	e7ca      	b.n	80035ca <_free_r+0x22>
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	20000224 	.word	0x20000224

0800363c <malloc>:
 800363c:	4b02      	ldr	r3, [pc, #8]	@ (8003648 <malloc+0xc>)
 800363e:	4601      	mov	r1, r0
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f000 b825 	b.w	8003690 <_malloc_r>
 8003646:	bf00      	nop
 8003648:	20000018 	.word	0x20000018

0800364c <sbrk_aligned>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0f      	ldr	r6, [pc, #60]	@ (800368c <sbrk_aligned+0x40>)
 8003650:	460c      	mov	r4, r1
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	4605      	mov	r5, r0
 8003656:	b911      	cbnz	r1, 800365e <sbrk_aligned+0x12>
 8003658:	f000 f964 	bl	8003924 <_sbrk_r>
 800365c:	6030      	str	r0, [r6, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 f95f 	bl	8003924 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d103      	bne.n	8003672 <sbrk_aligned+0x26>
 800366a:	f04f 34ff 	mov.w	r4, #4294967295
 800366e:	4620      	mov	r0, r4
 8003670:	bd70      	pop	{r4, r5, r6, pc}
 8003672:	1cc4      	adds	r4, r0, #3
 8003674:	f024 0403 	bic.w	r4, r4, #3
 8003678:	42a0      	cmp	r0, r4
 800367a:	d0f8      	beq.n	800366e <sbrk_aligned+0x22>
 800367c:	1a21      	subs	r1, r4, r0
 800367e:	4628      	mov	r0, r5
 8003680:	f000 f950 	bl	8003924 <_sbrk_r>
 8003684:	3001      	adds	r0, #1
 8003686:	d1f2      	bne.n	800366e <sbrk_aligned+0x22>
 8003688:	e7ef      	b.n	800366a <sbrk_aligned+0x1e>
 800368a:	bf00      	nop
 800368c:	20000220 	.word	0x20000220

08003690 <_malloc_r>:
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	1ccd      	adds	r5, r1, #3
 8003696:	f025 0503 	bic.w	r5, r5, #3
 800369a:	3508      	adds	r5, #8
 800369c:	2d0c      	cmp	r5, #12
 800369e:	bf38      	it	cc
 80036a0:	250c      	movcc	r5, #12
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	4606      	mov	r6, r0
 80036a6:	db01      	blt.n	80036ac <_malloc_r+0x1c>
 80036a8:	42a9      	cmp	r1, r5
 80036aa:	d904      	bls.n	80036b6 <_malloc_r+0x26>
 80036ac:	230c      	movs	r3, #12
 80036ae:	6033      	str	r3, [r6, #0]
 80036b0:	2000      	movs	r0, #0
 80036b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800378c <_malloc_r+0xfc>
 80036ba:	f000 f869 	bl	8003790 <__malloc_lock>
 80036be:	f8d8 3000 	ldr.w	r3, [r8]
 80036c2:	461c      	mov	r4, r3
 80036c4:	bb44      	cbnz	r4, 8003718 <_malloc_r+0x88>
 80036c6:	4629      	mov	r1, r5
 80036c8:	4630      	mov	r0, r6
 80036ca:	f7ff ffbf 	bl	800364c <sbrk_aligned>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	4604      	mov	r4, r0
 80036d2:	d158      	bne.n	8003786 <_malloc_r+0xf6>
 80036d4:	f8d8 4000 	ldr.w	r4, [r8]
 80036d8:	4627      	mov	r7, r4
 80036da:	2f00      	cmp	r7, #0
 80036dc:	d143      	bne.n	8003766 <_malloc_r+0xd6>
 80036de:	2c00      	cmp	r4, #0
 80036e0:	d04b      	beq.n	800377a <_malloc_r+0xea>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	4639      	mov	r1, r7
 80036e6:	4630      	mov	r0, r6
 80036e8:	eb04 0903 	add.w	r9, r4, r3
 80036ec:	f000 f91a 	bl	8003924 <_sbrk_r>
 80036f0:	4581      	cmp	r9, r0
 80036f2:	d142      	bne.n	800377a <_malloc_r+0xea>
 80036f4:	6821      	ldr	r1, [r4, #0]
 80036f6:	1a6d      	subs	r5, r5, r1
 80036f8:	4629      	mov	r1, r5
 80036fa:	4630      	mov	r0, r6
 80036fc:	f7ff ffa6 	bl	800364c <sbrk_aligned>
 8003700:	3001      	adds	r0, #1
 8003702:	d03a      	beq.n	800377a <_malloc_r+0xea>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	442b      	add	r3, r5
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	f8d8 3000 	ldr.w	r3, [r8]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	bb62      	cbnz	r2, 800376c <_malloc_r+0xdc>
 8003712:	f8c8 7000 	str.w	r7, [r8]
 8003716:	e00f      	b.n	8003738 <_malloc_r+0xa8>
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	1b52      	subs	r2, r2, r5
 800371c:	d420      	bmi.n	8003760 <_malloc_r+0xd0>
 800371e:	2a0b      	cmp	r2, #11
 8003720:	d917      	bls.n	8003752 <_malloc_r+0xc2>
 8003722:	1961      	adds	r1, r4, r5
 8003724:	42a3      	cmp	r3, r4
 8003726:	6025      	str	r5, [r4, #0]
 8003728:	bf18      	it	ne
 800372a:	6059      	strne	r1, [r3, #4]
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	bf08      	it	eq
 8003730:	f8c8 1000 	streq.w	r1, [r8]
 8003734:	5162      	str	r2, [r4, r5]
 8003736:	604b      	str	r3, [r1, #4]
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f82f 	bl	800379c <__malloc_unlock>
 800373e:	f104 000b 	add.w	r0, r4, #11
 8003742:	1d23      	adds	r3, r4, #4
 8003744:	f020 0007 	bic.w	r0, r0, #7
 8003748:	1ac2      	subs	r2, r0, r3
 800374a:	bf1c      	itt	ne
 800374c:	1a1b      	subne	r3, r3, r0
 800374e:	50a3      	strne	r3, [r4, r2]
 8003750:	e7af      	b.n	80036b2 <_malloc_r+0x22>
 8003752:	6862      	ldr	r2, [r4, #4]
 8003754:	42a3      	cmp	r3, r4
 8003756:	bf0c      	ite	eq
 8003758:	f8c8 2000 	streq.w	r2, [r8]
 800375c:	605a      	strne	r2, [r3, #4]
 800375e:	e7eb      	b.n	8003738 <_malloc_r+0xa8>
 8003760:	4623      	mov	r3, r4
 8003762:	6864      	ldr	r4, [r4, #4]
 8003764:	e7ae      	b.n	80036c4 <_malloc_r+0x34>
 8003766:	463c      	mov	r4, r7
 8003768:	687f      	ldr	r7, [r7, #4]
 800376a:	e7b6      	b.n	80036da <_malloc_r+0x4a>
 800376c:	461a      	mov	r2, r3
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	42a3      	cmp	r3, r4
 8003772:	d1fb      	bne.n	800376c <_malloc_r+0xdc>
 8003774:	2300      	movs	r3, #0
 8003776:	6053      	str	r3, [r2, #4]
 8003778:	e7de      	b.n	8003738 <_malloc_r+0xa8>
 800377a:	230c      	movs	r3, #12
 800377c:	6033      	str	r3, [r6, #0]
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f80c 	bl	800379c <__malloc_unlock>
 8003784:	e794      	b.n	80036b0 <_malloc_r+0x20>
 8003786:	6005      	str	r5, [r0, #0]
 8003788:	e7d6      	b.n	8003738 <_malloc_r+0xa8>
 800378a:	bf00      	nop
 800378c:	20000224 	.word	0x20000224

08003790 <__malloc_lock>:
 8003790:	4801      	ldr	r0, [pc, #4]	@ (8003798 <__malloc_lock+0x8>)
 8003792:	f7ff bee8 	b.w	8003566 <__retarget_lock_acquire_recursive>
 8003796:	bf00      	nop
 8003798:	2000021c 	.word	0x2000021c

0800379c <__malloc_unlock>:
 800379c:	4801      	ldr	r0, [pc, #4]	@ (80037a4 <__malloc_unlock+0x8>)
 800379e:	f7ff bee3 	b.w	8003568 <__retarget_lock_release_recursive>
 80037a2:	bf00      	nop
 80037a4:	2000021c 	.word	0x2000021c

080037a8 <__sflush_r>:
 80037a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b0:	0716      	lsls	r6, r2, #28
 80037b2:	4605      	mov	r5, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	d454      	bmi.n	8003862 <__sflush_r+0xba>
 80037b8:	684b      	ldr	r3, [r1, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc02      	bgt.n	80037c4 <__sflush_r+0x1c>
 80037be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	dd48      	ble.n	8003856 <__sflush_r+0xae>
 80037c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c6:	2e00      	cmp	r6, #0
 80037c8:	d045      	beq.n	8003856 <__sflush_r+0xae>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037d0:	682f      	ldr	r7, [r5, #0]
 80037d2:	6a21      	ldr	r1, [r4, #32]
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	d030      	beq.n	800383a <__sflush_r+0x92>
 80037d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	0759      	lsls	r1, r3, #29
 80037de:	d505      	bpl.n	80037ec <__sflush_r+0x44>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	1ad2      	subs	r2, r2, r3
 80037e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037e6:	b10b      	cbz	r3, 80037ec <__sflush_r+0x44>
 80037e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037f0:	6a21      	ldr	r1, [r4, #32]
 80037f2:	4628      	mov	r0, r5
 80037f4:	47b0      	blx	r6
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	d106      	bne.n	800380a <__sflush_r+0x62>
 80037fc:	6829      	ldr	r1, [r5, #0]
 80037fe:	291d      	cmp	r1, #29
 8003800:	d82b      	bhi.n	800385a <__sflush_r+0xb2>
 8003802:	4a2a      	ldr	r2, [pc, #168]	@ (80038ac <__sflush_r+0x104>)
 8003804:	410a      	asrs	r2, r1
 8003806:	07d6      	lsls	r6, r2, #31
 8003808:	d427      	bmi.n	800385a <__sflush_r+0xb2>
 800380a:	2200      	movs	r2, #0
 800380c:	6062      	str	r2, [r4, #4]
 800380e:	04d9      	lsls	r1, r3, #19
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	d504      	bpl.n	8003820 <__sflush_r+0x78>
 8003816:	1c42      	adds	r2, r0, #1
 8003818:	d101      	bne.n	800381e <__sflush_r+0x76>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	b903      	cbnz	r3, 8003820 <__sflush_r+0x78>
 800381e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003822:	602f      	str	r7, [r5, #0]
 8003824:	b1b9      	cbz	r1, 8003856 <__sflush_r+0xae>
 8003826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800382a:	4299      	cmp	r1, r3
 800382c:	d002      	beq.n	8003834 <__sflush_r+0x8c>
 800382e:	4628      	mov	r0, r5
 8003830:	f7ff feba 	bl	80035a8 <_free_r>
 8003834:	2300      	movs	r3, #0
 8003836:	6363      	str	r3, [r4, #52]	@ 0x34
 8003838:	e00d      	b.n	8003856 <__sflush_r+0xae>
 800383a:	2301      	movs	r3, #1
 800383c:	4628      	mov	r0, r5
 800383e:	47b0      	blx	r6
 8003840:	4602      	mov	r2, r0
 8003842:	1c50      	adds	r0, r2, #1
 8003844:	d1c9      	bne.n	80037da <__sflush_r+0x32>
 8003846:	682b      	ldr	r3, [r5, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0c6      	beq.n	80037da <__sflush_r+0x32>
 800384c:	2b1d      	cmp	r3, #29
 800384e:	d001      	beq.n	8003854 <__sflush_r+0xac>
 8003850:	2b16      	cmp	r3, #22
 8003852:	d11e      	bne.n	8003892 <__sflush_r+0xea>
 8003854:	602f      	str	r7, [r5, #0]
 8003856:	2000      	movs	r0, #0
 8003858:	e022      	b.n	80038a0 <__sflush_r+0xf8>
 800385a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800385e:	b21b      	sxth	r3, r3
 8003860:	e01b      	b.n	800389a <__sflush_r+0xf2>
 8003862:	690f      	ldr	r7, [r1, #16]
 8003864:	2f00      	cmp	r7, #0
 8003866:	d0f6      	beq.n	8003856 <__sflush_r+0xae>
 8003868:	0793      	lsls	r3, r2, #30
 800386a:	680e      	ldr	r6, [r1, #0]
 800386c:	bf08      	it	eq
 800386e:	694b      	ldreq	r3, [r1, #20]
 8003870:	600f      	str	r7, [r1, #0]
 8003872:	bf18      	it	ne
 8003874:	2300      	movne	r3, #0
 8003876:	eba6 0807 	sub.w	r8, r6, r7
 800387a:	608b      	str	r3, [r1, #8]
 800387c:	f1b8 0f00 	cmp.w	r8, #0
 8003880:	dde9      	ble.n	8003856 <__sflush_r+0xae>
 8003882:	6a21      	ldr	r1, [r4, #32]
 8003884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003886:	4643      	mov	r3, r8
 8003888:	463a      	mov	r2, r7
 800388a:	4628      	mov	r0, r5
 800388c:	47b0      	blx	r6
 800388e:	2800      	cmp	r0, #0
 8003890:	dc08      	bgt.n	80038a4 <__sflush_r+0xfc>
 8003892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a4:	4407      	add	r7, r0
 80038a6:	eba8 0800 	sub.w	r8, r8, r0
 80038aa:	e7e7      	b.n	800387c <__sflush_r+0xd4>
 80038ac:	dfbffffe 	.word	0xdfbffffe

080038b0 <_fflush_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	690b      	ldr	r3, [r1, #16]
 80038b4:	4605      	mov	r5, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b913      	cbnz	r3, 80038c0 <_fflush_r+0x10>
 80038ba:	2500      	movs	r5, #0
 80038bc:	4628      	mov	r0, r5
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	b118      	cbz	r0, 80038ca <_fflush_r+0x1a>
 80038c2:	6a03      	ldr	r3, [r0, #32]
 80038c4:	b90b      	cbnz	r3, 80038ca <_fflush_r+0x1a>
 80038c6:	f7ff fd5b 	bl	8003380 <__sinit>
 80038ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f3      	beq.n	80038ba <_fflush_r+0xa>
 80038d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038d4:	07d0      	lsls	r0, r2, #31
 80038d6:	d404      	bmi.n	80038e2 <_fflush_r+0x32>
 80038d8:	0599      	lsls	r1, r3, #22
 80038da:	d402      	bmi.n	80038e2 <_fflush_r+0x32>
 80038dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038de:	f7ff fe42 	bl	8003566 <__retarget_lock_acquire_recursive>
 80038e2:	4628      	mov	r0, r5
 80038e4:	4621      	mov	r1, r4
 80038e6:	f7ff ff5f 	bl	80037a8 <__sflush_r>
 80038ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038ec:	07da      	lsls	r2, r3, #31
 80038ee:	4605      	mov	r5, r0
 80038f0:	d4e4      	bmi.n	80038bc <_fflush_r+0xc>
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	059b      	lsls	r3, r3, #22
 80038f6:	d4e1      	bmi.n	80038bc <_fflush_r+0xc>
 80038f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038fa:	f7ff fe35 	bl	8003568 <__retarget_lock_release_recursive>
 80038fe:	e7dd      	b.n	80038bc <_fflush_r+0xc>

08003900 <fiprintf>:
 8003900:	b40e      	push	{r1, r2, r3}
 8003902:	b503      	push	{r0, r1, lr}
 8003904:	4601      	mov	r1, r0
 8003906:	ab03      	add	r3, sp, #12
 8003908:	4805      	ldr	r0, [pc, #20]	@ (8003920 <fiprintf+0x20>)
 800390a:	f853 2b04 	ldr.w	r2, [r3], #4
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	f000 f847 	bl	80039a4 <_vfiprintf_r>
 8003916:	b002      	add	sp, #8
 8003918:	f85d eb04 	ldr.w	lr, [sp], #4
 800391c:	b003      	add	sp, #12
 800391e:	4770      	bx	lr
 8003920:	20000018 	.word	0x20000018

08003924 <_sbrk_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d06      	ldr	r5, [pc, #24]	@ (8003940 <_sbrk_r+0x1c>)
 8003928:	2300      	movs	r3, #0
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fd f85a 	bl	80009e8 <_sbrk>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_sbrk_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_sbrk_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	20000218 	.word	0x20000218

08003944 <abort>:
 8003944:	b508      	push	{r3, lr}
 8003946:	2006      	movs	r0, #6
 8003948:	f000 fb8e 	bl	8004068 <raise>
 800394c:	2001      	movs	r0, #1
 800394e:	f7fc ffd3 	bl	80008f8 <_exit>

08003952 <__sfputc_r>:
 8003952:	6893      	ldr	r3, [r2, #8]
 8003954:	3b01      	subs	r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	b410      	push	{r4}
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	da08      	bge.n	8003970 <__sfputc_r+0x1e>
 800395e:	6994      	ldr	r4, [r2, #24]
 8003960:	42a3      	cmp	r3, r4
 8003962:	db01      	blt.n	8003968 <__sfputc_r+0x16>
 8003964:	290a      	cmp	r1, #10
 8003966:	d103      	bne.n	8003970 <__sfputc_r+0x1e>
 8003968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800396c:	f000 bac0 	b.w	8003ef0 <__swbuf_r>
 8003970:	6813      	ldr	r3, [r2, #0]
 8003972:	1c58      	adds	r0, r3, #1
 8003974:	6010      	str	r0, [r2, #0]
 8003976:	7019      	strb	r1, [r3, #0]
 8003978:	4608      	mov	r0, r1
 800397a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800397e:	4770      	bx	lr

08003980 <__sfputs_r>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	4606      	mov	r6, r0
 8003984:	460f      	mov	r7, r1
 8003986:	4614      	mov	r4, r2
 8003988:	18d5      	adds	r5, r2, r3
 800398a:	42ac      	cmp	r4, r5
 800398c:	d101      	bne.n	8003992 <__sfputs_r+0x12>
 800398e:	2000      	movs	r0, #0
 8003990:	e007      	b.n	80039a2 <__sfputs_r+0x22>
 8003992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003996:	463a      	mov	r2, r7
 8003998:	4630      	mov	r0, r6
 800399a:	f7ff ffda 	bl	8003952 <__sfputc_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d1f3      	bne.n	800398a <__sfputs_r+0xa>
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039a4 <_vfiprintf_r>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	460d      	mov	r5, r1
 80039aa:	b09d      	sub	sp, #116	@ 0x74
 80039ac:	4614      	mov	r4, r2
 80039ae:	4698      	mov	r8, r3
 80039b0:	4606      	mov	r6, r0
 80039b2:	b118      	cbz	r0, 80039bc <_vfiprintf_r+0x18>
 80039b4:	6a03      	ldr	r3, [r0, #32]
 80039b6:	b90b      	cbnz	r3, 80039bc <_vfiprintf_r+0x18>
 80039b8:	f7ff fce2 	bl	8003380 <__sinit>
 80039bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039be:	07d9      	lsls	r1, r3, #31
 80039c0:	d405      	bmi.n	80039ce <_vfiprintf_r+0x2a>
 80039c2:	89ab      	ldrh	r3, [r5, #12]
 80039c4:	059a      	lsls	r2, r3, #22
 80039c6:	d402      	bmi.n	80039ce <_vfiprintf_r+0x2a>
 80039c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039ca:	f7ff fdcc 	bl	8003566 <__retarget_lock_acquire_recursive>
 80039ce:	89ab      	ldrh	r3, [r5, #12]
 80039d0:	071b      	lsls	r3, r3, #28
 80039d2:	d501      	bpl.n	80039d8 <_vfiprintf_r+0x34>
 80039d4:	692b      	ldr	r3, [r5, #16]
 80039d6:	b99b      	cbnz	r3, 8003a00 <_vfiprintf_r+0x5c>
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f000 fac6 	bl	8003f6c <__swsetup_r>
 80039e0:	b170      	cbz	r0, 8003a00 <_vfiprintf_r+0x5c>
 80039e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039e4:	07dc      	lsls	r4, r3, #31
 80039e6:	d504      	bpl.n	80039f2 <_vfiprintf_r+0x4e>
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	b01d      	add	sp, #116	@ 0x74
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	0598      	lsls	r0, r3, #22
 80039f6:	d4f7      	bmi.n	80039e8 <_vfiprintf_r+0x44>
 80039f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039fa:	f7ff fdb5 	bl	8003568 <__retarget_lock_release_recursive>
 80039fe:	e7f3      	b.n	80039e8 <_vfiprintf_r+0x44>
 8003a00:	2300      	movs	r3, #0
 8003a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a04:	2320      	movs	r3, #32
 8003a06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a0e:	2330      	movs	r3, #48	@ 0x30
 8003a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003bc0 <_vfiprintf_r+0x21c>
 8003a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a18:	f04f 0901 	mov.w	r9, #1
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	469a      	mov	sl, r3
 8003a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a24:	b10a      	cbz	r2, 8003a2a <_vfiprintf_r+0x86>
 8003a26:	2a25      	cmp	r2, #37	@ 0x25
 8003a28:	d1f9      	bne.n	8003a1e <_vfiprintf_r+0x7a>
 8003a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a2e:	d00b      	beq.n	8003a48 <_vfiprintf_r+0xa4>
 8003a30:	465b      	mov	r3, fp
 8003a32:	4622      	mov	r2, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff ffa2 	bl	8003980 <__sfputs_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	f000 80a7 	beq.w	8003b90 <_vfiprintf_r+0x1ec>
 8003a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a44:	445a      	add	r2, fp
 8003a46:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a48:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 809f 	beq.w	8003b90 <_vfiprintf_r+0x1ec>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a5c:	f10a 0a01 	add.w	sl, sl, #1
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	9307      	str	r3, [sp, #28]
 8003a64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a68:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a6a:	4654      	mov	r4, sl
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a72:	4853      	ldr	r0, [pc, #332]	@ (8003bc0 <_vfiprintf_r+0x21c>)
 8003a74:	f7fc fbac 	bl	80001d0 <memchr>
 8003a78:	9a04      	ldr	r2, [sp, #16]
 8003a7a:	b9d8      	cbnz	r0, 8003ab4 <_vfiprintf_r+0x110>
 8003a7c:	06d1      	lsls	r1, r2, #27
 8003a7e:	bf44      	itt	mi
 8003a80:	2320      	movmi	r3, #32
 8003a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a86:	0713      	lsls	r3, r2, #28
 8003a88:	bf44      	itt	mi
 8003a8a:	232b      	movmi	r3, #43	@ 0x2b
 8003a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a90:	f89a 3000 	ldrb.w	r3, [sl]
 8003a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a96:	d015      	beq.n	8003ac4 <_vfiprintf_r+0x120>
 8003a98:	9a07      	ldr	r2, [sp, #28]
 8003a9a:	4654      	mov	r4, sl
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f04f 0c0a 	mov.w	ip, #10
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aa8:	3b30      	subs	r3, #48	@ 0x30
 8003aaa:	2b09      	cmp	r3, #9
 8003aac:	d94b      	bls.n	8003b46 <_vfiprintf_r+0x1a2>
 8003aae:	b1b0      	cbz	r0, 8003ade <_vfiprintf_r+0x13a>
 8003ab0:	9207      	str	r2, [sp, #28]
 8003ab2:	e014      	b.n	8003ade <_vfiprintf_r+0x13a>
 8003ab4:	eba0 0308 	sub.w	r3, r0, r8
 8003ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	46a2      	mov	sl, r4
 8003ac2:	e7d2      	b.n	8003a6a <_vfiprintf_r+0xc6>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1d19      	adds	r1, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	9103      	str	r1, [sp, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfbb      	ittet	lt
 8003ad0:	425b      	neglt	r3, r3
 8003ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad6:	9307      	strge	r3, [sp, #28]
 8003ad8:	9307      	strlt	r3, [sp, #28]
 8003ada:	bfb8      	it	lt
 8003adc:	9204      	strlt	r2, [sp, #16]
 8003ade:	7823      	ldrb	r3, [r4, #0]
 8003ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ae2:	d10a      	bne.n	8003afa <_vfiprintf_r+0x156>
 8003ae4:	7863      	ldrb	r3, [r4, #1]
 8003ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae8:	d132      	bne.n	8003b50 <_vfiprintf_r+0x1ac>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	1d1a      	adds	r2, r3, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	9203      	str	r2, [sp, #12]
 8003af2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003af6:	3402      	adds	r4, #2
 8003af8:	9305      	str	r3, [sp, #20]
 8003afa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bd0 <_vfiprintf_r+0x22c>
 8003afe:	7821      	ldrb	r1, [r4, #0]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4650      	mov	r0, sl
 8003b04:	f7fc fb64 	bl	80001d0 <memchr>
 8003b08:	b138      	cbz	r0, 8003b1a <_vfiprintf_r+0x176>
 8003b0a:	9b04      	ldr	r3, [sp, #16]
 8003b0c:	eba0 000a 	sub.w	r0, r0, sl
 8003b10:	2240      	movs	r2, #64	@ 0x40
 8003b12:	4082      	lsls	r2, r0
 8003b14:	4313      	orrs	r3, r2
 8003b16:	3401      	adds	r4, #1
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1e:	4829      	ldr	r0, [pc, #164]	@ (8003bc4 <_vfiprintf_r+0x220>)
 8003b20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b24:	2206      	movs	r2, #6
 8003b26:	f7fc fb53 	bl	80001d0 <memchr>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d03f      	beq.n	8003bae <_vfiprintf_r+0x20a>
 8003b2e:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <_vfiprintf_r+0x224>)
 8003b30:	bb1b      	cbnz	r3, 8003b7a <_vfiprintf_r+0x1d6>
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	3307      	adds	r3, #7
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	9303      	str	r3, [sp, #12]
 8003b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b40:	443b      	add	r3, r7
 8003b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b44:	e76a      	b.n	8003a1c <_vfiprintf_r+0x78>
 8003b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	e7a8      	b.n	8003aa2 <_vfiprintf_r+0xfe>
 8003b50:	2300      	movs	r3, #0
 8003b52:	3401      	adds	r4, #1
 8003b54:	9305      	str	r3, [sp, #20]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 0c0a 	mov.w	ip, #10
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b62:	3a30      	subs	r2, #48	@ 0x30
 8003b64:	2a09      	cmp	r2, #9
 8003b66:	d903      	bls.n	8003b70 <_vfiprintf_r+0x1cc>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0c6      	beq.n	8003afa <_vfiprintf_r+0x156>
 8003b6c:	9105      	str	r1, [sp, #20]
 8003b6e:	e7c4      	b.n	8003afa <_vfiprintf_r+0x156>
 8003b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b74:	4604      	mov	r4, r0
 8003b76:	2301      	movs	r3, #1
 8003b78:	e7f0      	b.n	8003b5c <_vfiprintf_r+0x1b8>
 8003b7a:	ab03      	add	r3, sp, #12
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	462a      	mov	r2, r5
 8003b80:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <_vfiprintf_r+0x228>)
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	4630      	mov	r0, r6
 8003b86:	f3af 8000 	nop.w
 8003b8a:	4607      	mov	r7, r0
 8003b8c:	1c78      	adds	r0, r7, #1
 8003b8e:	d1d6      	bne.n	8003b3e <_vfiprintf_r+0x19a>
 8003b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b92:	07d9      	lsls	r1, r3, #31
 8003b94:	d405      	bmi.n	8003ba2 <_vfiprintf_r+0x1fe>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	059a      	lsls	r2, r3, #22
 8003b9a:	d402      	bmi.n	8003ba2 <_vfiprintf_r+0x1fe>
 8003b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b9e:	f7ff fce3 	bl	8003568 <__retarget_lock_release_recursive>
 8003ba2:	89ab      	ldrh	r3, [r5, #12]
 8003ba4:	065b      	lsls	r3, r3, #25
 8003ba6:	f53f af1f 	bmi.w	80039e8 <_vfiprintf_r+0x44>
 8003baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bac:	e71e      	b.n	80039ec <_vfiprintf_r+0x48>
 8003bae:	ab03      	add	r3, sp, #12
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <_vfiprintf_r+0x228>)
 8003bb6:	a904      	add	r1, sp, #16
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f879 	bl	8003cb0 <_printf_i>
 8003bbe:	e7e4      	b.n	8003b8a <_vfiprintf_r+0x1e6>
 8003bc0:	080042ab 	.word	0x080042ab
 8003bc4:	080042b5 	.word	0x080042b5
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	08003981 	.word	0x08003981
 8003bd0:	080042b1 	.word	0x080042b1

08003bd4 <_printf_common>:
 8003bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	4616      	mov	r6, r2
 8003bda:	4698      	mov	r8, r3
 8003bdc:	688a      	ldr	r2, [r1, #8]
 8003bde:	690b      	ldr	r3, [r1, #16]
 8003be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bfb8      	it	lt
 8003be8:	4613      	movlt	r3, r2
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	b10a      	cbz	r2, 8003bfa <_printf_common+0x26>
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	0699      	lsls	r1, r3, #26
 8003bfe:	bf42      	ittt	mi
 8003c00:	6833      	ldrmi	r3, [r6, #0]
 8003c02:	3302      	addmi	r3, #2
 8003c04:	6033      	strmi	r3, [r6, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	f015 0506 	ands.w	r5, r5, #6
 8003c0c:	d106      	bne.n	8003c1c <_printf_common+0x48>
 8003c0e:	f104 0a19 	add.w	sl, r4, #25
 8003c12:	68e3      	ldr	r3, [r4, #12]
 8003c14:	6832      	ldr	r2, [r6, #0]
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	dc26      	bgt.n	8003c6a <_printf_common+0x96>
 8003c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	3b00      	subs	r3, #0
 8003c24:	bf18      	it	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	0692      	lsls	r2, r2, #26
 8003c2a:	d42b      	bmi.n	8003c84 <_printf_common+0xb0>
 8003c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c30:	4641      	mov	r1, r8
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c8      	blx	r9
 8003c36:	3001      	adds	r0, #1
 8003c38:	d01e      	beq.n	8003c78 <_printf_common+0xa4>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	f003 0306 	and.w	r3, r3, #6
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf02      	ittt	eq
 8003c46:	68e5      	ldreq	r5, [r4, #12]
 8003c48:	6833      	ldreq	r3, [r6, #0]
 8003c4a:	1aed      	subeq	r5, r5, r3
 8003c4c:	68a3      	ldr	r3, [r4, #8]
 8003c4e:	bf0c      	ite	eq
 8003c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c54:	2500      	movne	r5, #0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfc4      	itt	gt
 8003c5a:	1a9b      	subgt	r3, r3, r2
 8003c5c:	18ed      	addgt	r5, r5, r3
 8003c5e:	2600      	movs	r6, #0
 8003c60:	341a      	adds	r4, #26
 8003c62:	42b5      	cmp	r5, r6
 8003c64:	d11a      	bne.n	8003c9c <_printf_common+0xc8>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e008      	b.n	8003c7c <_printf_common+0xa8>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4652      	mov	r2, sl
 8003c6e:	4641      	mov	r1, r8
 8003c70:	4638      	mov	r0, r7
 8003c72:	47c8      	blx	r9
 8003c74:	3001      	adds	r0, #1
 8003c76:	d103      	bne.n	8003c80 <_printf_common+0xac>
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c80:	3501      	adds	r5, #1
 8003c82:	e7c6      	b.n	8003c12 <_printf_common+0x3e>
 8003c84:	18e1      	adds	r1, r4, r3
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	2030      	movs	r0, #48	@ 0x30
 8003c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c8e:	4422      	add	r2, r4
 8003c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c98:	3302      	adds	r3, #2
 8003c9a:	e7c7      	b.n	8003c2c <_printf_common+0x58>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	47c8      	blx	r9
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0e6      	beq.n	8003c78 <_printf_common+0xa4>
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7d9      	b.n	8003c62 <_printf_common+0x8e>
	...

08003cb0 <_printf_i>:
 8003cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	7e0f      	ldrb	r7, [r1, #24]
 8003cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cb8:	2f78      	cmp	r7, #120	@ 0x78
 8003cba:	4691      	mov	r9, r2
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cc6:	d807      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cc8:	2f62      	cmp	r7, #98	@ 0x62
 8003cca:	d80a      	bhi.n	8003ce2 <_printf_i+0x32>
 8003ccc:	2f00      	cmp	r7, #0
 8003cce:	f000 80d2 	beq.w	8003e76 <_printf_i+0x1c6>
 8003cd2:	2f58      	cmp	r7, #88	@ 0x58
 8003cd4:	f000 80b9 	beq.w	8003e4a <_printf_i+0x19a>
 8003cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ce0:	e03a      	b.n	8003d58 <_printf_i+0xa8>
 8003ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ce6:	2b15      	cmp	r3, #21
 8003ce8:	d8f6      	bhi.n	8003cd8 <_printf_i+0x28>
 8003cea:	a101      	add	r1, pc, #4	@ (adr r1, 8003cf0 <_printf_i+0x40>)
 8003cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003cd9 	.word	0x08003cd9
 8003cfc:	08003cd9 	.word	0x08003cd9
 8003d00:	08003cd9 	.word	0x08003cd9
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003cd9 	.word	0x08003cd9
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003e5d 	.word	0x08003e5d
 8003d20:	08003d87 	.word	0x08003d87
 8003d24:	08003e17 	.word	0x08003e17
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003cd9 	.word	0x08003cd9
 8003d30:	08003e7f 	.word	0x08003e7f
 8003d34:	08003cd9 	.word	0x08003cd9
 8003d38:	08003d87 	.word	0x08003d87
 8003d3c:	08003cd9 	.word	0x08003cd9
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003e1f 	.word	0x08003e1f
 8003d48:	6833      	ldr	r3, [r6, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6032      	str	r2, [r6, #0]
 8003d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e09d      	b.n	8003e98 <_printf_i+0x1e8>
 8003d5c:	6833      	ldr	r3, [r6, #0]
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	1d19      	adds	r1, r3, #4
 8003d62:	6031      	str	r1, [r6, #0]
 8003d64:	0606      	lsls	r6, r0, #24
 8003d66:	d501      	bpl.n	8003d6c <_printf_i+0xbc>
 8003d68:	681d      	ldr	r5, [r3, #0]
 8003d6a:	e003      	b.n	8003d74 <_printf_i+0xc4>
 8003d6c:	0645      	lsls	r5, r0, #25
 8003d6e:	d5fb      	bpl.n	8003d68 <_printf_i+0xb8>
 8003d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	da03      	bge.n	8003d80 <_printf_i+0xd0>
 8003d78:	232d      	movs	r3, #45	@ 0x2d
 8003d7a:	426d      	negs	r5, r5
 8003d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d80:	4859      	ldr	r0, [pc, #356]	@ (8003ee8 <_printf_i+0x238>)
 8003d82:	230a      	movs	r3, #10
 8003d84:	e011      	b.n	8003daa <_printf_i+0xfa>
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	6833      	ldr	r3, [r6, #0]
 8003d8a:	0608      	lsls	r0, r1, #24
 8003d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d90:	d402      	bmi.n	8003d98 <_printf_i+0xe8>
 8003d92:	0649      	lsls	r1, r1, #25
 8003d94:	bf48      	it	mi
 8003d96:	b2ad      	uxthmi	r5, r5
 8003d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d9a:	4853      	ldr	r0, [pc, #332]	@ (8003ee8 <_printf_i+0x238>)
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	bf14      	ite	ne
 8003da0:	230a      	movne	r3, #10
 8003da2:	2308      	moveq	r3, #8
 8003da4:	2100      	movs	r1, #0
 8003da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003daa:	6866      	ldr	r6, [r4, #4]
 8003dac:	60a6      	str	r6, [r4, #8]
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	bfa2      	ittt	ge
 8003db2:	6821      	ldrge	r1, [r4, #0]
 8003db4:	f021 0104 	bicge.w	r1, r1, #4
 8003db8:	6021      	strge	r1, [r4, #0]
 8003dba:	b90d      	cbnz	r5, 8003dc0 <_printf_i+0x110>
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d04b      	beq.n	8003e58 <_printf_i+0x1a8>
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8003dca:	5dc7      	ldrb	r7, [r0, r7]
 8003dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dd0:	462f      	mov	r7, r5
 8003dd2:	42bb      	cmp	r3, r7
 8003dd4:	460d      	mov	r5, r1
 8003dd6:	d9f4      	bls.n	8003dc2 <_printf_i+0x112>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d10b      	bne.n	8003df4 <_printf_i+0x144>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	07df      	lsls	r7, r3, #31
 8003de0:	d508      	bpl.n	8003df4 <_printf_i+0x144>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	6861      	ldr	r1, [r4, #4]
 8003de6:	4299      	cmp	r1, r3
 8003de8:	bfde      	ittt	le
 8003dea:	2330      	movle	r3, #48	@ 0x30
 8003dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003df4:	1b92      	subs	r2, r2, r6
 8003df6:	6122      	str	r2, [r4, #16]
 8003df8:	f8cd a000 	str.w	sl, [sp]
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	aa03      	add	r2, sp, #12
 8003e00:	4621      	mov	r1, r4
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7ff fee6 	bl	8003bd4 <_printf_common>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d14a      	bne.n	8003ea2 <_printf_i+0x1f2>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	b004      	add	sp, #16
 8003e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	4833      	ldr	r0, [pc, #204]	@ (8003eec <_printf_i+0x23c>)
 8003e20:	2778      	movs	r7, #120	@ 0x78
 8003e22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	6831      	ldr	r1, [r6, #0]
 8003e2a:	061f      	lsls	r7, r3, #24
 8003e2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e30:	d402      	bmi.n	8003e38 <_printf_i+0x188>
 8003e32:	065f      	lsls	r7, r3, #25
 8003e34:	bf48      	it	mi
 8003e36:	b2ad      	uxthmi	r5, r5
 8003e38:	6031      	str	r1, [r6, #0]
 8003e3a:	07d9      	lsls	r1, r3, #31
 8003e3c:	bf44      	itt	mi
 8003e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e42:	6023      	strmi	r3, [r4, #0]
 8003e44:	b11d      	cbz	r5, 8003e4e <_printf_i+0x19e>
 8003e46:	2310      	movs	r3, #16
 8003e48:	e7ac      	b.n	8003da4 <_printf_i+0xf4>
 8003e4a:	4827      	ldr	r0, [pc, #156]	@ (8003ee8 <_printf_i+0x238>)
 8003e4c:	e7e9      	b.n	8003e22 <_printf_i+0x172>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f023 0320 	bic.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	e7f6      	b.n	8003e46 <_printf_i+0x196>
 8003e58:	4616      	mov	r6, r2
 8003e5a:	e7bd      	b.n	8003dd8 <_printf_i+0x128>
 8003e5c:	6833      	ldr	r3, [r6, #0]
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	6961      	ldr	r1, [r4, #20]
 8003e62:	1d18      	adds	r0, r3, #4
 8003e64:	6030      	str	r0, [r6, #0]
 8003e66:	062e      	lsls	r6, r5, #24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	d501      	bpl.n	8003e70 <_printf_i+0x1c0>
 8003e6c:	6019      	str	r1, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <_printf_i+0x1c6>
 8003e70:	0668      	lsls	r0, r5, #25
 8003e72:	d5fb      	bpl.n	8003e6c <_printf_i+0x1bc>
 8003e74:	8019      	strh	r1, [r3, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	6123      	str	r3, [r4, #16]
 8003e7a:	4616      	mov	r6, r2
 8003e7c:	e7bc      	b.n	8003df8 <_printf_i+0x148>
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	6032      	str	r2, [r6, #0]
 8003e84:	681e      	ldr	r6, [r3, #0]
 8003e86:	6862      	ldr	r2, [r4, #4]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f7fc f9a0 	bl	80001d0 <memchr>
 8003e90:	b108      	cbz	r0, 8003e96 <_printf_i+0x1e6>
 8003e92:	1b80      	subs	r0, r0, r6
 8003e94:	6060      	str	r0, [r4, #4]
 8003e96:	6863      	ldr	r3, [r4, #4]
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ea0:	e7aa      	b.n	8003df8 <_printf_i+0x148>
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	47d0      	blx	sl
 8003eac:	3001      	adds	r0, #1
 8003eae:	d0ad      	beq.n	8003e0c <_printf_i+0x15c>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	079b      	lsls	r3, r3, #30
 8003eb4:	d413      	bmi.n	8003ede <_printf_i+0x22e>
 8003eb6:	68e0      	ldr	r0, [r4, #12]
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	4298      	cmp	r0, r3
 8003ebc:	bfb8      	it	lt
 8003ebe:	4618      	movlt	r0, r3
 8003ec0:	e7a6      	b.n	8003e10 <_printf_i+0x160>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	47d0      	blx	sl
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d09d      	beq.n	8003e0c <_printf_i+0x15c>
 8003ed0:	3501      	adds	r5, #1
 8003ed2:	68e3      	ldr	r3, [r4, #12]
 8003ed4:	9903      	ldr	r1, [sp, #12]
 8003ed6:	1a5b      	subs	r3, r3, r1
 8003ed8:	42ab      	cmp	r3, r5
 8003eda:	dcf2      	bgt.n	8003ec2 <_printf_i+0x212>
 8003edc:	e7eb      	b.n	8003eb6 <_printf_i+0x206>
 8003ede:	2500      	movs	r5, #0
 8003ee0:	f104 0619 	add.w	r6, r4, #25
 8003ee4:	e7f5      	b.n	8003ed2 <_printf_i+0x222>
 8003ee6:	bf00      	nop
 8003ee8:	080042bc 	.word	0x080042bc
 8003eec:	080042cd 	.word	0x080042cd

08003ef0 <__swbuf_r>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	460e      	mov	r6, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	b118      	cbz	r0, 8003f02 <__swbuf_r+0x12>
 8003efa:	6a03      	ldr	r3, [r0, #32]
 8003efc:	b90b      	cbnz	r3, 8003f02 <__swbuf_r+0x12>
 8003efe:	f7ff fa3f 	bl	8003380 <__sinit>
 8003f02:	69a3      	ldr	r3, [r4, #24]
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	071a      	lsls	r2, r3, #28
 8003f0a:	d501      	bpl.n	8003f10 <__swbuf_r+0x20>
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	b943      	cbnz	r3, 8003f22 <__swbuf_r+0x32>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 f82a 	bl	8003f6c <__swsetup_r>
 8003f18:	b118      	cbz	r0, 8003f22 <__swbuf_r+0x32>
 8003f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f1e:	4638      	mov	r0, r7
 8003f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6922      	ldr	r2, [r4, #16]
 8003f26:	1a98      	subs	r0, r3, r2
 8003f28:	6963      	ldr	r3, [r4, #20]
 8003f2a:	b2f6      	uxtb	r6, r6
 8003f2c:	4283      	cmp	r3, r0
 8003f2e:	4637      	mov	r7, r6
 8003f30:	dc05      	bgt.n	8003f3e <__swbuf_r+0x4e>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f7ff fcbb 	bl	80038b0 <_fflush_r>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d1ed      	bne.n	8003f1a <__swbuf_r+0x2a>
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	60a3      	str	r3, [r4, #8]
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	6022      	str	r2, [r4, #0]
 8003f4a:	701e      	strb	r6, [r3, #0]
 8003f4c:	6962      	ldr	r2, [r4, #20]
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d004      	beq.n	8003f5e <__swbuf_r+0x6e>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	07db      	lsls	r3, r3, #31
 8003f58:	d5e1      	bpl.n	8003f1e <__swbuf_r+0x2e>
 8003f5a:	2e0a      	cmp	r6, #10
 8003f5c:	d1df      	bne.n	8003f1e <__swbuf_r+0x2e>
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f7ff fca5 	bl	80038b0 <_fflush_r>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0d9      	beq.n	8003f1e <__swbuf_r+0x2e>
 8003f6a:	e7d6      	b.n	8003f1a <__swbuf_r+0x2a>

08003f6c <__swsetup_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4b29      	ldr	r3, [pc, #164]	@ (8004014 <__swsetup_r+0xa8>)
 8003f70:	4605      	mov	r5, r0
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	460c      	mov	r4, r1
 8003f76:	b118      	cbz	r0, 8003f80 <__swsetup_r+0x14>
 8003f78:	6a03      	ldr	r3, [r0, #32]
 8003f7a:	b90b      	cbnz	r3, 8003f80 <__swsetup_r+0x14>
 8003f7c:	f7ff fa00 	bl	8003380 <__sinit>
 8003f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f84:	0719      	lsls	r1, r3, #28
 8003f86:	d422      	bmi.n	8003fce <__swsetup_r+0x62>
 8003f88:	06da      	lsls	r2, r3, #27
 8003f8a:	d407      	bmi.n	8003f9c <__swsetup_r+0x30>
 8003f8c:	2209      	movs	r2, #9
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f94:	81a3      	strh	r3, [r4, #12]
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9a:	e033      	b.n	8004004 <__swsetup_r+0x98>
 8003f9c:	0758      	lsls	r0, r3, #29
 8003f9e:	d512      	bpl.n	8003fc6 <__swsetup_r+0x5a>
 8003fa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fa2:	b141      	cbz	r1, 8003fb6 <__swsetup_r+0x4a>
 8003fa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	d002      	beq.n	8003fb2 <__swsetup_r+0x46>
 8003fac:	4628      	mov	r0, r5
 8003fae:	f7ff fafb 	bl	80035a8 <_free_r>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	6923      	ldr	r3, [r4, #16]
 8003fd0:	b94b      	cbnz	r3, 8003fe6 <__swsetup_r+0x7a>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fdc:	d003      	beq.n	8003fe6 <__swsetup_r+0x7a>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f883 	bl	80040ec <__smakebuf_r>
 8003fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fea:	f013 0201 	ands.w	r2, r3, #1
 8003fee:	d00a      	beq.n	8004006 <__swsetup_r+0x9a>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	60a2      	str	r2, [r4, #8]
 8003ff4:	6962      	ldr	r2, [r4, #20]
 8003ff6:	4252      	negs	r2, r2
 8003ff8:	61a2      	str	r2, [r4, #24]
 8003ffa:	6922      	ldr	r2, [r4, #16]
 8003ffc:	b942      	cbnz	r2, 8004010 <__swsetup_r+0xa4>
 8003ffe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004002:	d1c5      	bne.n	8003f90 <__swsetup_r+0x24>
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	0799      	lsls	r1, r3, #30
 8004008:	bf58      	it	pl
 800400a:	6962      	ldrpl	r2, [r4, #20]
 800400c:	60a2      	str	r2, [r4, #8]
 800400e:	e7f4      	b.n	8003ffa <__swsetup_r+0x8e>
 8004010:	2000      	movs	r0, #0
 8004012:	e7f7      	b.n	8004004 <__swsetup_r+0x98>
 8004014:	20000018 	.word	0x20000018

08004018 <_raise_r>:
 8004018:	291f      	cmp	r1, #31
 800401a:	b538      	push	{r3, r4, r5, lr}
 800401c:	4605      	mov	r5, r0
 800401e:	460c      	mov	r4, r1
 8004020:	d904      	bls.n	800402c <_raise_r+0x14>
 8004022:	2316      	movs	r3, #22
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800402e:	b112      	cbz	r2, 8004036 <_raise_r+0x1e>
 8004030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004034:	b94b      	cbnz	r3, 800404a <_raise_r+0x32>
 8004036:	4628      	mov	r0, r5
 8004038:	f000 f830 	bl	800409c <_getpid_r>
 800403c:	4622      	mov	r2, r4
 800403e:	4601      	mov	r1, r0
 8004040:	4628      	mov	r0, r5
 8004042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004046:	f000 b817 	b.w	8004078 <_kill_r>
 800404a:	2b01      	cmp	r3, #1
 800404c:	d00a      	beq.n	8004064 <_raise_r+0x4c>
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	d103      	bne.n	800405a <_raise_r+0x42>
 8004052:	2316      	movs	r3, #22
 8004054:	6003      	str	r3, [r0, #0]
 8004056:	2001      	movs	r0, #1
 8004058:	e7e7      	b.n	800402a <_raise_r+0x12>
 800405a:	2100      	movs	r1, #0
 800405c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004060:	4620      	mov	r0, r4
 8004062:	4798      	blx	r3
 8004064:	2000      	movs	r0, #0
 8004066:	e7e0      	b.n	800402a <_raise_r+0x12>

08004068 <raise>:
 8004068:	4b02      	ldr	r3, [pc, #8]	@ (8004074 <raise+0xc>)
 800406a:	4601      	mov	r1, r0
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f7ff bfd3 	b.w	8004018 <_raise_r>
 8004072:	bf00      	nop
 8004074:	20000018 	.word	0x20000018

08004078 <_kill_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d07      	ldr	r5, [pc, #28]	@ (8004098 <_kill_r+0x20>)
 800407c:	2300      	movs	r3, #0
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	f7fc fc27 	bl	80008d8 <_kill>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d102      	bne.n	8004094 <_kill_r+0x1c>
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	b103      	cbz	r3, 8004094 <_kill_r+0x1c>
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	bf00      	nop
 8004098:	20000218 	.word	0x20000218

0800409c <_getpid_r>:
 800409c:	f7fc bc14 	b.w	80008c8 <_getpid>

080040a0 <__swhatbuf_r>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	460c      	mov	r4, r1
 80040a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a8:	2900      	cmp	r1, #0
 80040aa:	b096      	sub	sp, #88	@ 0x58
 80040ac:	4615      	mov	r5, r2
 80040ae:	461e      	mov	r6, r3
 80040b0:	da0d      	bge.n	80040ce <__swhatbuf_r+0x2e>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	bf14      	ite	ne
 80040be:	2340      	movne	r3, #64	@ 0x40
 80040c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040c4:	2000      	movs	r0, #0
 80040c6:	6031      	str	r1, [r6, #0]
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	b016      	add	sp, #88	@ 0x58
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	466a      	mov	r2, sp
 80040d0:	f000 f848 	bl	8004164 <_fstat_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	dbec      	blt.n	80040b2 <__swhatbuf_r+0x12>
 80040d8:	9901      	ldr	r1, [sp, #4]
 80040da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040e2:	4259      	negs	r1, r3
 80040e4:	4159      	adcs	r1, r3
 80040e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ea:	e7eb      	b.n	80040c4 <__swhatbuf_r+0x24>

080040ec <__smakebuf_r>:
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040f0:	079d      	lsls	r5, r3, #30
 80040f2:	4606      	mov	r6, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	d507      	bpl.n	8004108 <__smakebuf_r+0x1c>
 80040f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	2301      	movs	r3, #1
 8004102:	6163      	str	r3, [r4, #20]
 8004104:	b003      	add	sp, #12
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	ab01      	add	r3, sp, #4
 800410a:	466a      	mov	r2, sp
 800410c:	f7ff ffc8 	bl	80040a0 <__swhatbuf_r>
 8004110:	9f00      	ldr	r7, [sp, #0]
 8004112:	4605      	mov	r5, r0
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	f7ff faba 	bl	8003690 <_malloc_r>
 800411c:	b948      	cbnz	r0, 8004132 <__smakebuf_r+0x46>
 800411e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004122:	059a      	lsls	r2, r3, #22
 8004124:	d4ee      	bmi.n	8004104 <__smakebuf_r+0x18>
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	e7e2      	b.n	80040f8 <__smakebuf_r+0xc>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	6020      	str	r0, [r4, #0]
 8004136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004142:	b15b      	cbz	r3, 800415c <__smakebuf_r+0x70>
 8004144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f81d 	bl	8004188 <_isatty_r>
 800414e:	b128      	cbz	r0, 800415c <__smakebuf_r+0x70>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	431d      	orrs	r5, r3
 8004160:	81a5      	strh	r5, [r4, #12]
 8004162:	e7cf      	b.n	8004104 <__smakebuf_r+0x18>

08004164 <_fstat_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d07      	ldr	r5, [pc, #28]	@ (8004184 <_fstat_r+0x20>)
 8004168:	2300      	movs	r3, #0
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	f7fc fc11 	bl	8000998 <_fstat>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d102      	bne.n	8004180 <_fstat_r+0x1c>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	b103      	cbz	r3, 8004180 <_fstat_r+0x1c>
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	bd38      	pop	{r3, r4, r5, pc}
 8004182:	bf00      	nop
 8004184:	20000218 	.word	0x20000218

08004188 <_isatty_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_isatty_r+0x1c>)
 800418c:	2300      	movs	r3, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fc fc10 	bl	80009b8 <_isatty>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_isatty_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_isatty_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000218 	.word	0x20000218

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
